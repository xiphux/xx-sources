
From: Alex Zarochentsev <zam@namesys.com>


Signed-off-by: Andrew Morton <akpm@osdl.org>
---

 25-akpm/fs/reiser4/block_alloc.c |   17 +++++++++--------
 25-akpm/fs/reiser4/inode.c       |    7 ++++---
 25-akpm/fs/reiser4/inode_ops.c   |    3 ++-
 25-akpm/fs/reiser4/key.c         |   18 +++++++++---------
 25-akpm/fs/reiser4/safe_link.c   |    5 +++--
 25-akpm/fs/reiser4/search.c      |    4 ++--
 25-akpm/fs/reiser4/tree_mod.c    |    3 ++-
 25-akpm/fs/reiser4/znode.c       |    2 +-
 8 files changed, 32 insertions(+), 27 deletions(-)

diff -puN fs/reiser4/block_alloc.c~reiser4-printk-warning-fixes fs/reiser4/block_alloc.c
--- 25/fs/reiser4/block_alloc.c~reiser4-printk-warning-fixes	2004-08-19 01:20:05.875990904 -0700
+++ 25-akpm/fs/reiser4/block_alloc.c	2004-08-19 01:20:05.889988776 -0700
@@ -236,14 +236,15 @@ check_block_counters(const struct super_
 		       "used %llu, free %llu, "
 		       "grabbed %llu, fake allocated (formatetd %llu, unformatted %llu), "
 		       "reserved %llu, clustered %llu, sum %llu, must be (block count) %llu\n",
-		       reiser4_data_blocks(super),
-		       reiser4_free_blocks(super),
-		       reiser4_grabbed_blocks(super),
-		       reiser4_fake_allocated(super),
-		       reiser4_fake_allocated_unformatted(super),
-		       flush_reserved(super),
-		       reiser4_clustered_blocks(super),
-		       sum, reiser4_block_count(super));
+		       (unsigned long long)reiser4_data_blocks(super),
+		       (unsigned long long)reiser4_free_blocks(super),
+		       (unsigned long long)reiser4_grabbed_blocks(super),
+		       (unsigned long long)reiser4_fake_allocated(super),
+		       (unsigned long long)reiser4_fake_allocated_unformatted(super),
+		       (unsigned long long)flush_reserved(super),
+		       (unsigned long long)reiser4_clustered_blocks(super),
+		       (unsigned long long)sum,
+		       (unsigned long long)reiser4_block_count(super));
 		return 0;
 	}
 	return 1;
diff -puN fs/reiser4/inode.c~reiser4-printk-warning-fixes fs/reiser4/inode.c
--- 25/fs/reiser4/inode.c~reiser4-printk-warning-fixes	2004-08-19 01:20:05.877990600 -0700
+++ 25-akpm/fs/reiser4/inode.c	2004-08-19 01:20:05.890988624 -0700
@@ -180,7 +180,8 @@ setup_inode_ops(struct inode *inode /* i
 		inode->i_mapping->a_ops = &sinfo->ops.as;
 		break;
 	default:
-		warning("nikita-291", "wrong file mode: %o for %llu", inode->i_mode, get_inode_oid(inode));
+		warning("nikita-291", "wrong file mode: %o for %llu", inode->i_mode,
+			(unsigned long long)get_inode_oid(inode));
 		reiser4_make_bad_inode(inode);
 		return RETERR(-EINVAL);
 	}
@@ -238,7 +239,7 @@ init_inode(struct inode *inode /* inode 
 			if (result != 0) {
 				warning("nikita-3447",
 					"Cannot set up plugins for %lli",
-					get_inode_oid(inode));
+					(unsigned long long)get_inode_oid(inode));
 			}
 		}
 	}
@@ -437,7 +438,7 @@ reiser4_iget(struct super_block *super /
 		}
 		if (inode_file_plugin(inode)->not_linked(inode)) {
 			warning("nikita-3559", "Unlinked inode found: %llu\n",
-				get_inode_oid(inode));
+				(unsigned long long)get_inode_oid(inode));
 			print_inode("inode", inode);
 		}
 	}
diff -puN fs/reiser4/inode_ops.c~reiser4-printk-warning-fixes fs/reiser4/inode_ops.c
--- 25/fs/reiser4/inode_ops.c~reiser4-printk-warning-fixes	2004-08-19 01:20:05.878990448 -0700
+++ 25-akpm/fs/reiser4/inode_ops.c	2004-08-19 01:20:05.890988624 -0700
@@ -369,7 +369,8 @@ truncate_object(struct inode *inode /* o
 	assert("nikita-2933", fplug->truncate != NULL);
 	result = fplug->truncate(inode, size);
 	if (result != 0)
-		warning("nikita-1602", "Truncate error: %i for %lli", result, get_inode_oid(inode));
+		warning("nikita-1602", "Truncate error: %i for %lli", result,
+			(unsigned long long)get_inode_oid(inode));
 
 	write_syscall_log("ex");
 	return result;
diff -puN fs/reiser4/key.c~reiser4-printk-warning-fixes fs/reiser4/key.c
--- 25/fs/reiser4/key.c~reiser4-printk-warning-fixes	2004-08-19 01:20:05.879990296 -0700
+++ 25-akpm/fs/reiser4/key.c	2004-08-19 01:20:05.891988472 -0700
@@ -142,19 +142,19 @@ sprintf_key(char *buffer /* buffer to pr
 {
 	if (REISER4_LARGE_KEY)
 		return sprintf(buffer, "(%Lx:%x:%Lx:%Lx:%Lx:%Lx)",
-			       get_key_locality(key),
+			       (unsigned long long)get_key_locality(key),
 			       get_key_type(key),
-			       get_key_ordering(key),
-			       get_key_band(key),
-			       get_key_objectid(key),
-			       get_key_offset(key));
+			       (unsigned long long)get_key_ordering(key),
+			       (unsigned long long)get_key_band(key),
+			       (unsigned long long)get_key_objectid(key),
+			       (unsigned long long)get_key_offset(key));
 	else
 		return sprintf(buffer, "(%Lx:%x:%Lx:%Lx:%Lx)",
-			       get_key_locality(key),
+			       (unsigned long long)get_key_locality(key),
 			       get_key_type(key),
-			       get_key_band(key),
-			       get_key_objectid(key),
-			       get_key_offset(key));
+			       (unsigned long long)get_key_band(key),
+			       (unsigned long long)get_key_objectid(key),
+			       (unsigned long long)get_key_offset(key));
 }
 
 /* Make Linus happy.
diff -puN fs/reiser4/safe_link.c~reiser4-printk-warning-fixes fs/reiser4/safe_link.c
--- 25/fs/reiser4/safe_link.c~reiser4-printk-warning-fixes	2004-08-19 01:20:05.881989992 -0700
+++ 25-akpm/fs/reiser4/safe_link.c	2004-08-19 01:20:05.891988472 -0700
@@ -277,7 +277,8 @@ static int process_safelink(struct super
 			result = fplug->safelink(inode, link, size);
 		else {
 			warning("nikita-3430",
-				"Cannot handle safelink for %lli", oid);
+				"Cannot handle safelink for %lli",
+				(unsigned long long)oid);
 			print_key("key", sdkey);
 			print_inode("inode", inode);
 			result = 0;
@@ -285,7 +286,7 @@ static int process_safelink(struct super
 		if (result != 0) {
 			warning("nikita-3431",
 				"Error processing safelink for %lli: %i",
-				oid, result);
+				(unsigned long long)oid, result);
 		}
 		reiser4_iget_complete(inode);
 		iput(inode);
diff -puN fs/reiser4/search.c~reiser4-printk-warning-fixes fs/reiser4/search.c
--- 25/fs/reiser4/search.c~reiser4-printk-warning-fixes	2004-08-19 01:20:05.882989840 -0700
+++ 25-akpm/fs/reiser4/search.c	2004-08-19 01:20:05.893988168 -0700
@@ -1592,9 +1592,9 @@ sprint_address(const reiser4_block_nr * 
 	if (block == NULL)
 		sprintf(address, "null");
 	else if (blocknr_is_fake(block))
-		sprintf(address, "%llx", *block);
+		sprintf(address, "%llx", (unsigned long long)(*block));
 	else
-		sprintf(address, "%llu", *block);
+		sprintf(address, "%llu", (unsigned long long)(*block));
 	return address;
 }
 
diff -puN fs/reiser4/tree_mod.c~reiser4-printk-warning-fixes fs/reiser4/tree_mod.c
--- 25/fs/reiser4/tree_mod.c~reiser4-printk-warning-fixes	2004-08-19 01:20:05.884989536 -0700
+++ 25-akpm/fs/reiser4/tree_mod.c	2004-08-19 01:20:05.893988168 -0700
@@ -59,7 +59,8 @@ new_node(znode * brother /* existing lef
 		}
 		/* cheap test, can be executed even when debugging is off */
 		if (!znode_just_created(result)) {
-			warning("nikita-2213", "Allocated already existing block: %llu", blocknr);
+			warning("nikita-2213", "Allocated already existing block: %llu",
+				(unsigned long long)blocknr);
 			zput(result);
 			return ERR_PTR(RETERR(-EIO));
 		}
diff -puN fs/reiser4/znode.c~reiser4-printk-warning-fixes fs/reiser4/znode.c
--- 25/fs/reiser4/znode.c~reiser4-printk-warning-fixes	2004-08-19 01:20:05.885989384 -0700
+++ 25-akpm/fs/reiser4/znode.c	2004-08-19 01:20:05.894988016 -0700
@@ -564,7 +564,7 @@ zget(reiser4_tree * tree,
 	if (unlikely(znode_get_level(result) != level)) {
 		warning("jmacd-504",
 			"Wrong level for cached block %llu: %i expecting %i",
-			*blocknr, znode_get_level(result), level);
+			(unsigned long long)(*blocknr), znode_get_level(result), level);
 		zput(result);
 		return ERR_PTR(RETERR(-EIO));
 	}
_
