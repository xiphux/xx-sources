Index: xx-sources/arch/i386/kernel/ioport.c
===================================================================
--- xx-sources.orig/arch/i386/kernel/ioport.c	2004-09-02 20:28:28.693544736 -0400
+++ xx-sources/arch/i386/kernel/ioport.c	2004-09-02 20:30:57.164973648 -0400
@@ -105,11 +105,11 @@
 
 	t->io_bitmap_max = bytes;
 
-	/* Update the TSS: */
-	memcpy(tss->io_bitmap, t->io_bitmap_ptr, bytes_updated);
-	tss->io_bitmap_max = bytes;
-	tss->io_bitmap_owner = &current->thread;
-	tss->io_bitmap_base = IO_BITMAP_OFFSET;
+	/*
+	 * Sets the lazy trigger so that the next I/O operation will
+	 * reload the correct bitmap.
+	 */
+	tss->io_bitmap_base = INVALID_IO_BITMAP_OFFSET_LAZY;
 
 	put_cpu();
 
Index: xx-sources/arch/i386/kernel/process.c
===================================================================
--- xx-sources.orig/arch/i386/kernel/process.c	2004-09-02 20:28:28.695544432 -0400
+++ xx-sources/arch/i386/kernel/process.c	2004-09-02 20:31:25.850612768 -0400
@@ -631,8 +631,16 @@
 		loaddebug(next, 7);
 	}
 
-	if (unlikely(prev->io_bitmap_ptr || next->io_bitmap_ptr))
-		handle_io_bitmap(next, tss);
+	/*
+	 * Lazy TSS's I/O bitmap copy. We set an invalid offset here and
+	 * we let the task to get a GPF in case an I/O instruction is performed.
+	 * The handler of the GPF will verify that the faulting task has a valid
+	 * I/O bitmap and, it true, does the real copy and restart the instruction.
+	 * This will save us for redoundant copies when the currently switched task
+	 * does not perform any I/O during its timeslice.
+	 */
+	tss->io_bitmap_base = next->io_bitmap_ptr ? INVALID_IO_BITMAP_OFFSET_LAZY:
+		INVALID_IO_BITMAP_OFFSET;
 
 	perfctr_resume_thread(next);
 
Index: xx-sources/arch/i386/kernel/traps.c
===================================================================
--- xx-sources.orig/arch/i386/kernel/traps.c	2004-09-02 19:38:22.860500816 -0400
+++ xx-sources/arch/i386/kernel/traps.c	2004-09-02 20:32:16.083976136 -0400
@@ -531,6 +531,35 @@
 
 asmlinkage void do_general_protection(struct pt_regs * regs, long error_code)
 {
+	int cpu = get_cpu();
+	struct tss_struct *tss = &per_cpu(init_tss, cpu);
+	struct thread_struct *tsk_th = &current->thread;
+
+	/*
+	 * Perform the lazy TSS's I/O bitmap copy. If the TSS has an
+	 * invalid offset set (the LAZY one) and the faulting thread has
+	 * a valid I/O bitmap pointer, we copy the I/O bitmap in the TSS
+	 * and we set the offset field correctly. Then we let the CPU to
+	 * restart the faulting instruction.
+	 */
+	if (tss->io_bitmap_base == INVALID_IO_BITMAP_OFFSET_LAZY &&
+	    tsk_th->io_bitmap_ptr) {
+		memcpy(tss->io_bitmap, tsk_th->io_bitmap_ptr,
+		       tsk_th->io_bitmap_max);
+		/*
+		 * If the previously set map was extending to higher ports
+		 * than the current one, pad extra space with 0xff (no access).
+		 */
+		if (tsk_th->io_bitmap_max < tss->map_size)
+			memset((char *) tss->io_bitmap + tsk_th->io_bitmap_max, 0xff,
+			       tss->map_size - tsk_th->io_bitmap_max);
+		tss->map_size = tsk_th->io_bitmap_max;
+		tss->io_bitmap_base = IO_BITMAP_OFFSET;
+		put_cpu();
+		return;
+	}
+	put_cpu();
+
 	if (regs->eflags & VM_MASK)
 		goto gp_in_vm86;
 
Index: xx-sources/include/asm-i386/processor.h
===================================================================
--- xx-sources.orig/include/asm-i386/processor.h	2004-09-02 20:28:28.697544128 -0400
+++ xx-sources/include/asm-i386/processor.h	2004-09-02 20:33:13.549240088 -0400
@@ -307,6 +307,7 @@
 #define IO_BITMAP_LONGS (IO_BITMAP_BYTES/sizeof(long))
 #define IO_BITMAP_OFFSET offsetof(struct tss_struct,io_bitmap)
 #define INVALID_IO_BITMAP_OFFSET 0x8000
+#define INVALID_IO_BITMAP_OFFSET_LAZY 0x9000
 
 struct i387_fsave_struct {
 	long	cwd;
@@ -399,9 +400,13 @@
 	unsigned long io_bitmap_max;
 	struct thread_struct *io_bitmap_owner;
 	/*
+	 * Effective size of the currently set I/O bitmap.
+	 */
+	unsigned long	map_size;
+	/*
 	 * pads the TSS to be cacheline-aligned (size is 0x100)
 	 */
-	unsigned long __cacheline_filler[35];
+	unsigned long __cacheline_filler[34];
 	/*
 	 * .. and then another 0x100 bytes for emergency kernel stack
 	 */
