
From: Thomas Gleixner <tglx@linutronix.de>

Use the new lock initializers DEFINE_SPIN_LOCK and DEFINE_RW_LOCK

Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
Signed-off-by: Andrew Morton <akpm@osdl.org>
---

 25-akpm/drivers/scsi/aha1542.c              |    2 +-
 25-akpm/drivers/scsi/dpt_i2o.c              |    2 +-
 25-akpm/drivers/scsi/eata.c                 |    2 +-
 25-akpm/drivers/scsi/esp.c                  |    2 +-
 25-akpm/drivers/scsi/imm.c                  |    2 +-
 25-akpm/drivers/scsi/ipr.c                  |    2 +-
 25-akpm/drivers/scsi/osst.c                 |    2 +-
 25-akpm/drivers/scsi/ppa.c                  |    2 +-
 25-akpm/drivers/scsi/qlogicpti.c            |    2 +-
 25-akpm/drivers/scsi/scsi.c                 |    2 +-
 25-akpm/drivers/scsi/scsi_debug.c           |    6 +++---
 25-akpm/drivers/scsi/sd.c                   |    2 +-
 25-akpm/drivers/scsi/sg.c                   |    2 +-
 25-akpm/drivers/scsi/sr.c                   |    2 +-
 25-akpm/drivers/scsi/st.c                   |    2 +-
 25-akpm/drivers/scsi/sym53c416.c            |    2 +-
 25-akpm/drivers/scsi/sym53c8xx_2/sym_glue.c |    2 +-
 25-akpm/drivers/scsi/sym53c8xx_comm.h       |    2 +-
 25-akpm/drivers/scsi/u14-34f.c              |    2 +-
 19 files changed, 21 insertions(+), 21 deletions(-)

diff -puN drivers/scsi/aha1542.c~lock-initializer-cleanup-scsi drivers/scsi/aha1542.c
--- 25/drivers/scsi/aha1542.c~lock-initializer-cleanup-scsi	Wed Jan 12 16:54:41 2005
+++ 25-akpm/drivers/scsi/aha1542.c	Wed Jan 12 16:54:41 2005
@@ -167,7 +167,7 @@ struct aha1542_hostdata {
 
 static struct Scsi_Host *aha_host[7];	/* One for each IRQ level (9-15) */
 
-static spinlock_t aha1542_lock = SPIN_LOCK_UNLOCKED;
+static DEFINE_SPINLOCK(aha1542_lock);
 
 
 
diff -puN drivers/scsi/dpt_i2o.c~lock-initializer-cleanup-scsi drivers/scsi/dpt_i2o.c
--- 25/drivers/scsi/dpt_i2o.c~lock-initializer-cleanup-scsi	Wed Jan 12 16:54:41 2005
+++ 25-akpm/drivers/scsi/dpt_i2o.c	Wed Jan 12 16:54:41 2005
@@ -145,7 +145,7 @@ struct adpt_i2o_post_wait_data
 
 static struct adpt_i2o_post_wait_data *adpt_post_wait_queue = NULL;
 static u32 adpt_post_wait_id = 0;
-static spinlock_t adpt_post_wait_lock = SPIN_LOCK_UNLOCKED;
+static DEFINE_SPINLOCK(adpt_post_wait_lock);
 
 
 /*============================================================================
diff -puN drivers/scsi/eata.c~lock-initializer-cleanup-scsi drivers/scsi/eata.c
--- 25/drivers/scsi/eata.c~lock-initializer-cleanup-scsi	Wed Jan 12 16:54:41 2005
+++ 25-akpm/drivers/scsi/eata.c	Wed Jan 12 16:54:41 2005
@@ -839,7 +839,7 @@ struct hostdata {
 static struct Scsi_Host *sh[MAX_BOARDS];
 static const char *driver_name = "EATA";
 static char sha[MAX_BOARDS];
-static spinlock_t driver_lock = SPIN_LOCK_UNLOCKED;
+static DEFINE_SPINLOCK(driver_lock);
 
 /* Initialize num_boards so that ihdlr can work while detect is in progress */
 static unsigned int num_boards = MAX_BOARDS;
diff -puN drivers/scsi/esp.c~lock-initializer-cleanup-scsi drivers/scsi/esp.c
--- 25/drivers/scsi/esp.c~lock-initializer-cleanup-scsi	Wed Jan 12 16:54:41 2005
+++ 25-akpm/drivers/scsi/esp.c	Wed Jan 12 16:54:41 2005
@@ -185,7 +185,7 @@ enum {
 
 /* The master ring of all esp hosts we are managing in this driver. */
 static struct esp *espchain;
-static spinlock_t espchain_lock = SPIN_LOCK_UNLOCKED;
+static DEFINE_SPINLOCK(espchain_lock);
 static int esps_running = 0;
 
 /* Forward declarations. */
diff -puN drivers/scsi/imm.c~lock-initializer-cleanup-scsi drivers/scsi/imm.c
--- 25/drivers/scsi/imm.c~lock-initializer-cleanup-scsi	Wed Jan 12 16:54:41 2005
+++ 25-akpm/drivers/scsi/imm.c	Wed Jan 12 16:54:41 2005
@@ -60,7 +60,7 @@ static inline imm_struct *imm_dev(struct
 	return *(imm_struct **)&host->hostdata;
 }
 
-static spinlock_t arbitration_lock = SPIN_LOCK_UNLOCKED;
+static DEFINE_SPINLOCK(arbitration_lock);
 
 static void got_it(imm_struct *dev)
 {
diff -puN drivers/scsi/ipr.c~lock-initializer-cleanup-scsi drivers/scsi/ipr.c
--- 25/drivers/scsi/ipr.c~lock-initializer-cleanup-scsi	Wed Jan 12 16:54:41 2005
+++ 25-akpm/drivers/scsi/ipr.c	Wed Jan 12 16:54:41 2005
@@ -89,7 +89,7 @@ static struct list_head ipr_ioa_head = L
 static unsigned int ipr_log_level = IPR_DEFAULT_LOG_LEVEL;
 static unsigned int ipr_max_speed = 1;
 static int ipr_testmode = 0;
-static spinlock_t ipr_driver_lock = SPIN_LOCK_UNLOCKED;
+static DEFINE_SPINLOCK(ipr_driver_lock);
 
 /* This table describes the differences between DMA controller chips */
 static const struct ipr_chip_cfg_t ipr_chip_cfg[] = {
diff -puN drivers/scsi/osst.c~lock-initializer-cleanup-scsi drivers/scsi/osst.c
--- 25/drivers/scsi/osst.c~lock-initializer-cleanup-scsi	Wed Jan 12 16:54:41 2005
+++ 25-akpm/drivers/scsi/osst.c	Wed Jan 12 16:54:41 2005
@@ -150,7 +150,7 @@ static int osst_max_dev           = OSST
 static int osst_nr_dev;
 
 static struct osst_tape **os_scsi_tapes = NULL;
-static rwlock_t os_scsi_tapes_lock = RW_LOCK_UNLOCKED;
+static DEFINE_RWLOCK(os_scsi_tapes_lock);
 
 static int modes_defined = FALSE;
 
diff -puN drivers/scsi/ppa.c~lock-initializer-cleanup-scsi drivers/scsi/ppa.c
--- 25/drivers/scsi/ppa.c~lock-initializer-cleanup-scsi	Wed Jan 12 16:54:41 2005
+++ 25-akpm/drivers/scsi/ppa.c	Wed Jan 12 16:54:41 2005
@@ -49,7 +49,7 @@ static inline ppa_struct *ppa_dev(struct
 	return *(ppa_struct **)&host->hostdata;
 }
 
-static spinlock_t arbitration_lock = SPIN_LOCK_UNLOCKED;
+static DEFINE_SPINLOCK(arbitration_lock);
 
 static void got_it(ppa_struct *dev)
 {
diff -puN drivers/scsi/qlogicpti.c~lock-initializer-cleanup-scsi drivers/scsi/qlogicpti.c
--- 25/drivers/scsi/qlogicpti.c~lock-initializer-cleanup-scsi	Wed Jan 12 16:54:41 2005
+++ 25-akpm/drivers/scsi/qlogicpti.c	Wed Jan 12 16:54:41 2005
@@ -56,7 +56,7 @@
 #include "qlogicpti_asm.c"
 
 static struct qlogicpti *qptichain = NULL;
-static spinlock_t qptichain_lock = SPIN_LOCK_UNLOCKED;
+static DEFINE_SPINLOCK(qptichain_lock);
 static int qptis_running = 0;
 
 #define PACKB(a, b)			(((a)<<4)|(b))
diff -puN drivers/scsi/scsi.c~lock-initializer-cleanup-scsi drivers/scsi/scsi.c
--- 25/drivers/scsi/scsi.c~lock-initializer-cleanup-scsi	Wed Jan 12 16:54:41 2005
+++ 25-akpm/drivers/scsi/scsi.c	Wed Jan 12 16:54:41 2005
@@ -925,7 +925,7 @@ EXPORT_SYMBOL(scsi_finish_command);
  */
 void scsi_adjust_queue_depth(struct scsi_device *sdev, int tagged, int tags)
 {
-	static spinlock_t device_request_lock = SPIN_LOCK_UNLOCKED;
+	static DEFINE_SPINLOCK(device_request_lock);
 	unsigned long flags;
 
 	/*
diff -puN drivers/scsi/scsi_debug.c~lock-initializer-cleanup-scsi drivers/scsi/scsi_debug.c
--- 25/drivers/scsi/scsi_debug.c~lock-initializer-cleanup-scsi	Wed Jan 12 16:54:41 2005
+++ 25-akpm/drivers/scsi/scsi_debug.c	Wed Jan 12 16:54:41 2005
@@ -169,7 +169,7 @@ struct sdebug_host_info {
 	container_of(d, struct sdebug_host_info, dev)
 
 static LIST_HEAD(sdebug_host_list);
-static spinlock_t sdebug_host_list_lock = SPIN_LOCK_UNLOCKED;
+static DEFINE_SPINLOCK(sdebug_host_list_lock);
 
 typedef void (* done_funct_t) (struct scsi_cmnd *);
 
@@ -213,8 +213,8 @@ static int num_dev_resets = 0;
 static int num_bus_resets = 0;
 static int num_host_resets = 0;
 
-static spinlock_t queued_arr_lock = SPIN_LOCK_UNLOCKED;
-static rwlock_t atomic_rw = RW_LOCK_UNLOCKED;
+static DEFINE_SPINLOCK(queued_arr_lock);
+static DEFINE_RWLOCK(atomic_rw);
 
 static char sdebug_proc_name[] = "scsi_debug";
 
diff -puN drivers/scsi/sd.c~lock-initializer-cleanup-scsi drivers/scsi/sd.c
--- 25/drivers/scsi/sd.c~lock-initializer-cleanup-scsi	Wed Jan 12 16:54:41 2005
+++ 25-akpm/drivers/scsi/sd.c	Wed Jan 12 16:54:41 2005
@@ -105,7 +105,7 @@ struct scsi_disk {
 };
 
 static DEFINE_IDR(sd_index_idr);
-static spinlock_t sd_index_lock = SPIN_LOCK_UNLOCKED;
+static DEFINE_SPINLOCK(sd_index_lock);
 
 /* This semaphore is used to mediate the 0->1 reference get in the
  * face of object destruction (i.e. we can't allow a get on an
diff -puN drivers/scsi/sg.c~lock-initializer-cleanup-scsi drivers/scsi/sg.c
--- 25/drivers/scsi/sg.c~lock-initializer-cleanup-scsi	Wed Jan 12 16:54:41 2005
+++ 25-akpm/drivers/scsi/sg.c	Wed Jan 12 16:54:41 2005
@@ -108,7 +108,7 @@ static void sg_remove(struct class_devic
 
 static Scsi_Request *dummy_cmdp;	/* only used for sizeof */
 
-static rwlock_t sg_dev_arr_lock = RW_LOCK_UNLOCKED;	/* Also used to lock
+static DEFINE_RWLOCK(sg_dev_arr_lock);	/* Also used to lock
 							   file descriptor list for device */
 
 static struct class_interface sg_interface = {
diff -puN drivers/scsi/sr.c~lock-initializer-cleanup-scsi drivers/scsi/sr.c
--- 25/drivers/scsi/sr.c~lock-initializer-cleanup-scsi	Wed Jan 12 16:54:41 2005
+++ 25-akpm/drivers/scsi/sr.c	Wed Jan 12 16:54:41 2005
@@ -85,7 +85,7 @@ static struct scsi_driver sr_template = 
 };
 
 static unsigned long sr_index_bits[SR_DISKS / BITS_PER_LONG];
-static spinlock_t sr_index_lock = SPIN_LOCK_UNLOCKED;
+static DEFINE_SPINLOCK(sr_index_lock);
 
 /* This semaphore is used to mediate the 0->1 reference get in the
  * face of object destruction (i.e. we can't allow a get on an
diff -puN drivers/scsi/st.c~lock-initializer-cleanup-scsi drivers/scsi/st.c
--- 25/drivers/scsi/st.c~lock-initializer-cleanup-scsi	Wed Jan 12 16:54:41 2005
+++ 25-akpm/drivers/scsi/st.c	Wed Jan 12 16:54:41 2005
@@ -167,7 +167,7 @@ DEB( static int debugging = DEBUG; )
    24 bits) */
 #define SET_DENS_AND_BLK 0x10001
 
-static rwlock_t st_dev_arr_lock = RW_LOCK_UNLOCKED;
+static DEFINE_RWLOCK(st_dev_arr_lock);
 
 static int st_fixed_buffer_size = ST_FIXED_BUFFER_SIZE;
 static int st_max_sg_segs = ST_MAX_SG;
diff -puN drivers/scsi/sym53c416.c~lock-initializer-cleanup-scsi drivers/scsi/sym53c416.c
--- 25/drivers/scsi/sym53c416.c~lock-initializer-cleanup-scsi	Wed Jan 12 16:54:41 2005
+++ 25-akpm/drivers/scsi/sym53c416.c	Wed Jan 12 16:54:41 2005
@@ -239,7 +239,7 @@ static void sym53c416_set_transfer_count
 	outb((len & 0xFF0000) >> 16, base + TC_HIGH);
 }
 
-static spinlock_t sym53c416_lock = SPIN_LOCK_UNLOCKED;
+static DEFINE_SPINLOCK(sym53c416_lock);
 
 /* Returns the number of bytes read */
 static __inline__ unsigned int sym53c416_read(int base, unsigned char *buffer, unsigned int len)
diff -puN drivers/scsi/sym53c8xx_2/sym_glue.c~lock-initializer-cleanup-scsi drivers/scsi/sym53c8xx_2/sym_glue.c
--- 25/drivers/scsi/sym53c8xx_2/sym_glue.c~lock-initializer-cleanup-scsi	Wed Jan 12 16:54:41 2005
+++ 25-akpm/drivers/scsi/sym53c8xx_2/sym_glue.c	Wed Jan 12 16:54:41 2005
@@ -156,7 +156,7 @@ pci_get_base_address(struct pci_dev *pde
 }
 
 /* This lock protects only the memory allocation/free.  */
-static spinlock_t sym53c8xx_lock = SPIN_LOCK_UNLOCKED;
+static DEFINE_SPINLOCK(sym53c8xx_lock);
 
 static struct scsi_transport_template *sym2_transport_template = NULL;
 
diff -puN drivers/scsi/sym53c8xx_comm.h~lock-initializer-cleanup-scsi drivers/scsi/sym53c8xx_comm.h
--- 25/drivers/scsi/sym53c8xx_comm.h~lock-initializer-cleanup-scsi	Wed Jan 12 16:54:41 2005
+++ 25-akpm/drivers/scsi/sym53c8xx_comm.h	Wed Jan 12 16:54:41 2005
@@ -250,7 +250,7 @@ static void ___m_free(m_pool_s *mp, void
 	}
 }
 
-static spinlock_t ncr53c8xx_lock = SPIN_LOCK_UNLOCKED;
+static DEFINE_SPINLOCK(ncr53c8xx_lock);
 
 static void *__m_calloc2(m_pool_s *mp, int size, char *name, int uflags)
 {
diff -puN drivers/scsi/u14-34f.c~lock-initializer-cleanup-scsi drivers/scsi/u14-34f.c
--- 25/drivers/scsi/u14-34f.c~lock-initializer-cleanup-scsi	Wed Jan 12 16:54:41 2005
+++ 25-akpm/drivers/scsi/u14-34f.c	Wed Jan 12 16:54:41 2005
@@ -612,7 +612,7 @@ struct hostdata {
 static struct Scsi_Host *sh[MAX_BOARDS + 1];
 static const char *driver_name = "Ux4F";
 static char sha[MAX_BOARDS];
-static spinlock_t driver_lock = SPIN_LOCK_UNLOCKED;
+static DEFINE_SPINLOCK(driver_lock);
 
 /* Initialize num_boards so that ihdlr can work while detect is in progress */
 static unsigned int num_boards = MAX_BOARDS;
_
