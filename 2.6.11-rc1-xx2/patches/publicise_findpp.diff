Index: linux-2.6.10-rc2-mm1/include/linux/sched.h
===================================================================
--- linux-2.6.10-rc2-mm1.orig/include/linux/sched.h	2004-11-17 22:11:08.844901667 +1100
+++ linux-2.6.10-rc2-mm1/include/linux/sched.h	2004-11-17 22:11:12.607323613 +1100
@@ -728,6 +728,7 @@ extern int is_idle_task(const task_t *p)
 extern int task_curr(const task_t *p);
 extern int idle_cpu(int cpu);
 extern void set_oom_timeslice(task_t *p);
+extern task_t *find_process_by_pid(pid_t pid);
 
 void yield(void);
 
Index: linux-2.6.10-rc2-mm1/kernel/sched.c
===================================================================
--- linux-2.6.10-rc2-mm1.orig/kernel/sched.c	2004-11-17 22:11:10.780604267 +1100
+++ linux-2.6.10-rc2-mm1/kernel/sched.c	2004-11-17 22:11:12.609323306 +1100
@@ -2501,15 +2501,6 @@ static int ingo_idle_cpu(int cpu)
 	return cpu_curr(cpu) == cpu_rq(cpu)->idle;
 }
 
-/**
- * find_process_by_pid - find a process with a matching PID value.
- * @pid: the pid in question.
- */
-static inline task_t *find_process_by_pid(pid_t pid)
-{
-	return pid ? find_task_by_pid(pid) : current;
-}
-
 /* Actually do priority change: must hold rq lock. */
 static void __setscheduler(struct task_struct *p, int policy, int prio)
 {
