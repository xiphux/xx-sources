__oom_kill_task sets a specific time_slice; modify it to have it's
time_slice adjusted in a cpu-scheduler dependant fashion.

Signed-off-by: Con Kolivas <kernel@kolivas.org>


Index: xx-sources/include/linux/sched.h
===================================================================
--- xx-sources.orig/include/linux/sched.h	2005-01-14 20:43:50.204751200 +0000
+++ xx-sources/include/linux/sched.h	2005-01-14 20:56:54.369540032 +0000
@@ -784,6 +784,7 @@
 extern int task_curr(const task_t *p);
 extern int idle_cpu(int cpu);
 extern int sched_setscheduler(struct task_struct *, int, struct sched_param *);
+extern void set_oom_timeslice(task_t *p);
 
 void yield(void);
 
Index: xx-sources/mm/oom_kill.c
===================================================================
--- xx-sources.orig/mm/oom_kill.c	2005-01-14 17:36:21.000000000 +0000
+++ xx-sources/mm/oom_kill.c	2005-01-14 20:56:38.044021888 +0000
@@ -156,7 +156,7 @@
 	 * all the memory it needs. That way it should be able to
 	 * exit() and clear out its resources quickly...
 	 */
-	p->time_slice = HZ;
+	set_oom_timeslice(p);
 	p->flags |= PF_MEMALLOC | PF_MEMDIE;
 
 	/* This process has hardware access, be more careful. */
