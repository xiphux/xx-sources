Some cpu schedulers may want to do work when set task_cpu is called. For
completeness, Add a common version of task_cpu and set_task_cpu to
scheduler.c and make it privatised.

Signed-off-by: Con Kolivas <kernel@kolivas.org>


Index: linux-2.6.10-rc2-mm1/include/linux/sched.h
===================================================================
--- linux-2.6.10-rc2-mm1.orig/include/linux/sched.h	2004-11-17 23:22:58.110947391 +1100
+++ linux-2.6.10-rc2-mm1/include/linux/sched.h	2004-11-17 23:23:06.044729417 +1100
@@ -1075,33 +1075,8 @@ extern void recalc_sigpending(void);
 
 extern void signal_wake_up(struct task_struct *t, int resume_stopped);
 
-/*
- * Wrappers for p->thread_info->cpu access. No-op on UP.
- */
-#ifdef CONFIG_SMP
-
-static inline unsigned int task_cpu(const struct task_struct *p)
-{
-	return p->thread_info->cpu;
-}
-
-static inline void set_task_cpu(struct task_struct *p, unsigned int cpu)
-{
-	p->thread_info->cpu = cpu;
-}
-
-#else
-
-static inline unsigned int task_cpu(const struct task_struct *p)
-{
-	return 0;
-}
-
-static inline void set_task_cpu(struct task_struct *p, unsigned int cpu)
-{
-}
-
-#endif /* CONFIG_SMP */
+extern unsigned int task_cpu(const struct task_struct *p);
+extern void set_task_cpu(struct task_struct *p, unsigned int cpu);
 
 #ifdef HAVE_ARCH_PICK_MMAP_LAYOUT
 extern void arch_pick_mmap_layout(struct mm_struct *mm);
Index: linux-2.6.10-rc2-mm1/include/linux/scheduler.h
===================================================================
--- linux-2.6.10-rc2-mm1.orig/include/linux/scheduler.h	2004-11-17 23:23:04.067033028 +1100
+++ linux-2.6.10-rc2-mm1/include/linux/scheduler.h	2004-11-17 23:23:06.045729264 +1100
@@ -13,6 +13,8 @@
  */
 struct sched_drv
 {
+	unsigned int (*task_cpu)(const struct task_struct *);
+	void (*set_task_cpu)(struct task_struct *, unsigned int);
 	void (*init_sched_domain_sysctl)(void);
 	void (*destroy_sched_domain_sysctl)(void);
 	char cpusched_name[SCHED_NAME_MAX];
@@ -62,6 +64,12 @@ struct sched_drv
 };
 
 /*
+ * List functions that have common variants that many schedulers use.
+ */
+extern unsigned int common_task_cpu(const struct task_struct *p);
+extern void common_set_task_cpu(struct task_struct *p, unsigned int cpu);
+
+/*
  * All private per-scheduler entries in task_struct are defined here as
  * separate structs placed into the cpusched union in task_struct.
  */
Index: linux-2.6.10-rc2-mm1/kernel/sched.c
===================================================================
--- linux-2.6.10-rc2-mm1.orig/kernel/sched.c	2004-11-17 23:23:04.069032721 +1100
+++ linux-2.6.10-rc2-mm1/kernel/sched.c	2004-11-17 23:23:06.046729110 +1100
@@ -3799,6 +3799,8 @@ void ingo_normalize_rt_tasks(void)
 #endif /* CONFIG_MAGIC_SYSRQ */
 
 struct sched_drv ingo_sched_drv = {
+	.task_cpu		= common_task_cpu,
+	.set_task_cpu		= common_set_task_cpu,
 	.init_sched_domain_sysctl = ingo_init_sched_domain_sysctl,
 	.destroy_sched_domain_sysctl = ingo_destroy_sched_domain_sysctl,
 	.cpusched_name		= "ingosched",
Index: linux-2.6.10-rc2-mm1/kernel/scheduler.c
===================================================================
--- linux-2.6.10-rc2-mm1.orig/kernel/scheduler.c	2004-11-17 23:23:04.070032568 +1100
+++ linux-2.6.10-rc2-mm1/kernel/scheduler.c	2004-11-17 23:23:06.047728957 +1100
@@ -189,6 +189,10 @@ void account_steal_time(struct task_stru
 		cpustat->steal = cputime64_add(cpustat->steal, steal64);
 }
 
+unsigned int task_cpu(const struct task_struct *p);
+
+void set_task_cpu(struct task_struct *p, unsigned int cpu);
+
 #ifdef CONFIG_SMP
 /***
  * kick_process - kick a running thread to enter/exit the kernel
@@ -207,7 +211,31 @@ void kick_process(task_t *p)
 		smp_send_reschedule(cpu);
 	preempt_enable();
 }
-#endif
+
+/*
+ * Wrappers for p->thread_info->cpu access. No-op on UP.
+ */
+unsigned int common_task_cpu(const struct task_struct *p)
+{
+	return p->thread_info->cpu;
+}
+
+void common_set_task_cpu(struct task_struct *p, unsigned int cpu)
+{
+	p->thread_info->cpu = cpu;
+}
+
+#else
+
+unsigned int common_task_cpu(const struct task_struct *p)
+{
+	return 0;
+}
+
+void common_set_task_cpu(struct task_struct *p, unsigned int cpu)
+{
+}
+#endif /* CONFIG_SMP */
 
 #ifdef CONFIG_PREEMPT
 #ifdef CONFIG_DEBUG_PREEMPT
@@ -1287,6 +1315,16 @@ static int __init scheduler_setup(char *
 
 __setup ("cpusched=", scheduler_setup);
 
+unsigned int task_cpu(const struct task_struct *p)
+{
+	return scheduler->task_cpu(p);
+}
+
+void set_task_cpu(struct task_struct *p, unsigned int cpu)
+{
+	scheduler->set_task_cpu(p, cpu);
+}
+
 void init_sched_domain_sysctl(void)
 {
 	scheduler->init_sched_domain_sysctl();
