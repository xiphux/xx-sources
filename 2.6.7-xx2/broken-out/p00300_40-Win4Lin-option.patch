diff -ruN build-2.6/arch/i386/mki-adapter26/mki26.c win4lin-option/arch/i386/mki-adapter26/mki26.c
--- build-2.6/arch/i386/mki-adapter26/mki26.c	2004-05-12 14:11:39.000000000 +1000
+++ win4lin-option/arch/i386/mki-adapter26/mki26.c	2004-05-12 14:19:04.000000000 +1000
@@ -558,6 +558,7 @@
 	unsigned long *r0ptr = arg1_regs;
 	struct task_struct *curr = current;
 	mkia_task_t *mtip;
+	DECLARE_SWSUSP_LOCAL_VAR;
 
 	if (unlikely((mtip = curr->mki_task_info) == NULL))
 		return;
@@ -565,15 +566,9 @@
 	if (unlikely(!(mtip->mti_flags & MKIF_MARKED)))
 		return;
 
-	while (curr->flags & PF_FREEZE) {
-#ifdef PF_IOTHREAD
-		/* Call with PF_IOTHREAD to flush signals */
-		refrigerator(PF_IOTHREAD);
-#else
-		/* Call with PF_NOFREEZE to flush signals */
-		refrigerator(PF_NOFREEZE);
-#endif	/* PF_IOTHREAD */
-	}
+	SWSUSP_ACTIVITY_PAUSING;
+	SWSUSP_ACTIVITY_RESTARTING(PF_FREEZE);
+
 	if (signal_pending(current)) {
 		/*
 		 * We catch signals here so that the lower layer does
@@ -1721,11 +1716,15 @@
 	wait_queue_t wait;
 	unsigned long wqflags;
 	int retval;
+	DECLARE_SWSUSP_LOCAL_VAR;
 
 #ifdef CONFIG_PREEMPT
 	MKIA_ASSERT(mkia_get_preempt_count() != 0) ;
 #endif
 	taskp = current;
+
+	SWSUSP_ACTIVITY_PAUSING;
+
 	init_waitqueue_entry(&wait, taskp);
 	if (interruptible) {
 		taskp->state = TASK_INTERRUPTIBLE;
@@ -1751,15 +1750,7 @@
 
 	taskp->state = TASK_RUNNING;
 
-	while (taskp->flags & PF_FREEZE) {
-#ifdef PF_IOTHREAD
-		/* Call with PF_IOTHREAD to flush signals */
-		refrigerator(PF_IOTHREAD);
-#else
-		/* Call with PF_NOFREEZE to flush signals */
-		refrigerator(PF_NOFREEZE);
-#endif	/* PF_IOTHREAD */
-	}
+	SWSUSP_ACTIVITY_RESTARTING(PF_FREEZE);
 
 	if (interruptible) {
 		retval = (signal_pending(taskp)) ? 1 : 0;
