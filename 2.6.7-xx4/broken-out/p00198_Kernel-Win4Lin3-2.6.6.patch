---

 linux-2.6.7-xx3-xiphux/arch/i386/Kconfig              |   10 +
 linux-2.6.7-xx3-xiphux/arch/i386/Makefile             |    3 
 linux-2.6.7-xx3-xiphux/arch/i386/kernel/apm.c         |    4 
 linux-2.6.7-xx3-xiphux/arch/i386/kernel/cpu/common.c  |    7 +
 linux-2.6.7-xx3-xiphux/arch/i386/kernel/entry.S       |    3 
 linux-2.6.7-xx3-xiphux/arch/i386/kernel/head.S        |   89 +++++++++++++++++
 linux-2.6.7-xx3-xiphux/arch/i386/kernel/process.c     |    8 +
 linux-2.6.7-xx3-xiphux/arch/i386/kernel/signal.c      |   46 ++++++++
 linux-2.6.7-xx3-xiphux/arch/i386/kernel/vm86.c        |    9 +
 linux-2.6.7-xx3-xiphux/arch/i386/mki/Makefile         |    5 
 linux-2.6.7-xx3-xiphux/arch/i386/mki/mki.c            |   93 ++++++++++++++++++
 linux-2.6.7-xx3-xiphux/arch/i386/mm/fault.c           |    5 
 linux-2.6.7-xx3-xiphux/include/asm-i386/desc.h        |    5 
 linux-2.6.7-xx3-xiphux/include/asm-i386/mki.h         |   52 ++++++++++
 linux-2.6.7-xx3-xiphux/include/asm-i386/mkiversion.h  |   25 ++++
 linux-2.6.7-xx3-xiphux/include/asm-i386/segment.h     |   88 +++++++++++++++++
 linux-2.6.7-xx3-xiphux/include/asm-i386/thread_info.h |    6 +
 linux-2.6.7-xx3-xiphux/include/linux/init_task.h      |    1 
 linux-2.6.7-xx3-xiphux/include/linux/sched.h          |    8 +
 linux-2.6.7-xx3-xiphux/kernel/exit.c                  |   10 +
 linux-2.6.7-xx3-xiphux/kernel/fork.c                  |    4 
 linux-2.6.7-xx3-xiphux/kernel/sched.c                 |   26 +++++
 linux-2.6.7-xx3-xiphux/mm/vmscan.c                    |   15 ++
 23 files changed, 521 insertions(+), 1 deletion(-)

diff -puN arch/i386/Kconfig~Kernel-Win4Lin3-2.6.6 arch/i386/Kconfig
--- linux-2.6.7-xx3/arch/i386/Kconfig~Kernel-Win4Lin3-2.6.6	2004-06-25 19:03:02.574185448 -0400
+++ linux-2.6.7-xx3-xiphux/arch/i386/Kconfig	2004-06-25 19:08:44.009279424 -0400
@@ -1322,6 +1322,16 @@ source "fs/Kconfig"
 
 source "arch/i386/oprofile/Kconfig"
 
+menu "NeTraverse Win4Lin Support"
+config MKI
+	bool "Include NeTraverse Win4Lin Support"
+	select MODULES
+	select MODULE_UNLOAD
+	help
+	  Say Y here if you want a kernel that supports the NeTraverse
+	  Win4Lin products which let you run Windows as a guest Operating
+	  System on Linux systems.
+endmenu
 
 menu "Kernel hacking"
 
diff -puN arch/i386/Makefile~Kernel-Win4Lin3-2.6.6 arch/i386/Makefile
--- linux-2.6.7-xx3/arch/i386/Makefile~Kernel-Win4Lin3-2.6.6	2004-06-25 19:03:02.580184536 -0400
+++ linux-2.6.7-xx3-xiphux/arch/i386/Makefile	2004-06-25 19:03:02.643174960 -0400
@@ -124,6 +124,9 @@ drivers-$(CONFIG_PCI)			+= arch/i386/pci
 drivers-$(CONFIG_OPROFILE)		+= arch/i386/oprofile/
 drivers-$(CONFIG_PM)			+= arch/i386/power/
 
+# NeTraverse MKI support
+core-$(CONFIG_MKI)			+= arch/i386/mki/
+
 CFLAGS += $(mflags-y)
 AFLAGS += $(mflags-y)
 
diff -puN arch/i386/kernel/apm.c~Kernel-Win4Lin3-2.6.6 arch/i386/kernel/apm.c
--- linux-2.6.7-xx3/arch/i386/kernel/apm.c~Kernel-Win4Lin3-2.6.6	2004-06-25 19:03:02.583184080 -0400
+++ linux-2.6.7-xx3-xiphux/arch/i386/kernel/apm.c	2004-06-25 19:08:46.707869176 -0400
@@ -2292,6 +2292,10 @@ static int __init apm_init(void)
 	apm_bios_entry.segment = APM_CS;
 
 	for (i = 0; i < NR_CPUS; i++) {
+#ifdef CONFIG_MKI
+		if (cpu_gdt_table[i] == 0)
+			continue;
+#endif
 		set_base(cpu_gdt_table[i][APM_CS >> 3],
 			 __va((unsigned long)apm_info.bios.cseg << 4));
 		set_base(cpu_gdt_table[i][APM_CS_16 >> 3],
diff -puN arch/i386/kernel/cpu/common.c~Kernel-Win4Lin3-2.6.6 arch/i386/kernel/cpu/common.c
--- linux-2.6.7-xx3/arch/i386/kernel/cpu/common.c~Kernel-Win4Lin3-2.6.6	2004-06-25 19:03:02.585183776 -0400
+++ linux-2.6.7-xx3-xiphux/arch/i386/kernel/cpu/common.c	2004-06-25 19:08:43.063423216 -0400
@@ -524,6 +524,13 @@ void __init cpu_init (void)
 	 * and set up the GDT descriptor:
 	 */
 	if (cpu) {
+#ifdef CONFIG_MKI
+#if    GDT_SIZE != PAGE_SIZE
+#error CONFIG_MKI - unexpected GDT_SIZE
+#endif
+		cpu_gdt_table[cpu] =
+			(struct desc_struct *) __get_free_page(GFP_ATOMIC);
+#endif /* CONFIG_MKI */
 		memcpy(cpu_gdt_table[cpu], cpu_gdt_table[0], GDT_SIZE);
 		cpu_gdt_descr[cpu].size = GDT_SIZE - 1;
 		cpu_gdt_descr[cpu].address = (unsigned long)cpu_gdt_table[cpu];
diff -puN arch/i386/kernel/entry.S~Kernel-Win4Lin3-2.6.6 arch/i386/kernel/entry.S
--- linux-2.6.7-xx3/arch/i386/kernel/entry.S~Kernel-Win4Lin3-2.6.6	2004-06-25 19:03:02.588183320 -0400
+++ linux-2.6.7-xx3-xiphux/arch/i386/kernel/entry.S	2004-06-25 19:08:45.694023304 -0400
@@ -203,6 +203,9 @@ ENTRY(ret_from_fork)
 
 	# userspace resumption stub bypassing syscall exit tracing
 	ALIGN
+#ifdef CONFIG_MKI
+ENTRY(mki_process_trapret)
+#endif
 ret_from_exception:
 	preempt_stop
 ret_from_intr:
diff -puN arch/i386/kernel/head.S~Kernel-Win4Lin3-2.6.6 arch/i386/kernel/head.S
--- linux-2.6.7-xx3/arch/i386/kernel/head.S~Kernel-Win4Lin3-2.6.6	2004-06-25 19:03:02.592182712 -0400
+++ linux-2.6.7-xx3-xiphux/arch/i386/kernel/head.S	2004-06-25 19:03:02.650173896 -0400
@@ -460,7 +460,7 @@ idt_descr:
 	.word 0				# 32 bit align gdt_desc.address
 cpu_gdt_descr:
 	.word GDT_ENTRIES*8-1
-	.long cpu_gdt_table
+	.long gdt_table
 
 	.fill NR_CPUS-1,8,0		# space for the other GDT descriptors
 
@@ -478,6 +478,90 @@ ENTRY(boot_gdt_table)
  * The Global Descriptor Table contains 28 quadwords, per-CPU.
  */
 	.align PAGE_SIZE_asm
+
+
+#ifdef CONFIG_MKI
+/*
+ * The Global Descriptor Table.  Note that entries below __KERNEL_CS
+ * may differ if an MKI task is in context.  That is why we move the
+ * global kernel entries so far up.
+ */
+ENTRY(gdt_table)
+	.quad 0x0000000000000000	/* NULL descriptor */
+	.quad 0x0000000000000000	/* 0x0b reserved */
+	.quad 0x0000000000000000	/* 0x13 reserved */
+	.quad 0x0000000000000000	/* 0x1b reserved */
+	.quad 0x0000000000000000	/* 0x20 unused */
+	.quad 0x0000000000000000	/* 0x28 unused */
+	.quad 0x0000000000000000	/* 0x33 TLS entry 1 */
+	.quad 0x0000000000000000	/* 0x3b TLS entry 2 */
+	.quad 0x0000000000000000	/* 0x43 TLS entry 3 */
+	.quad 0x0000000000000000	/* 0x4b reserved */
+	.quad 0x0000000000000000	/* 0x53 reserved */
+	.quad 0x0000000000000000	/* 0x5b reserved */
+
+	.fill (__KERNEL_CS - 0x60),1,0 	/* reserved for MKI use */
+
+	/*
+	 * Note that the following four entries MUST be in this order and
+	 * all adjacent: Kernel Code then data immediately followed by User
+	 * Code and then data.  See the Sysenter()/Sysexit() instruction
+	 * details to understand why.
+	 */
+	.quad 0x00cf9a000000ffff	/* 0xf20 krnl 4GB code at 0x00000000 */
+	.quad 0x00cf92000000ffff	/* 0xf28 krnl 4GB data at 0x00000000 */
+	.quad 0x00cffa000000ffff	/* 0xf33 user 4GB code at 0x00000000 */
+	.quad 0x00cff2000000ffff	/* 0xf3b user 4GB data at 0x00000000 */
+
+	.quad 0x0000000000000000	/* 0xf40 TSS descriptor */
+	.quad 0x0000000000000000	/* 0xf48 LDT descriptor */
+
+	/* Segments used for calling PnP BIOS */
+	.quad 0x00c09a0000000000	/* 0xf50 32-bit code */
+	.quad 0x00809a0000000000	/* 0xf58 16-bit code */
+	.quad 0x0080920000000000	/* 0xf60 16-bit data */
+	.quad 0x0080920000000000	/* 0xf68 16-bit data */
+	.quad 0x0080920000000000	/* 0xf70 16-bit data */
+	/*
+	 * The APM segments have byte granularity and their bases
+	 * and limits are set at run time.
+	 */
+	.quad 0x00409a0000000000	/* 0xf78 APM CS    code */
+	.quad 0x00009a0000000000	/* 0xf80 APM CS 16 code (16 bit) */
+	.quad 0x0040920000000000	/* 0xf88 APM DS    data */
+
+	.quad 0x0000000000000000	/* 0xf90 - unused */
+	.quad 0x0000000000000000	/* 0xf98 - unused */
+	.quad 0x0000000000000000	/* 0xfa0 - unused */
+	.quad 0x0000000000000000	/* 0xfa8 - unused */
+	.quad 0x0000000000000000	/* 0xfb0 - unused */
+	.quad 0x0000000000000000	/* 0xfb8 - GDT entry 501: double-fault TSS */
+	.quad 0x0000000000000000	/* 0xfc0 - unused */
+	.quad 0x0000000000000000	/* 0xfc8 - unused */
+	.quad 0x0000000000000000	/* 0xfd0 - unused */
+	.quad 0x0000000000000000	/* 0xfd8 - unused */
+	.quad 0x0000000000000000	/* 0xfe0 - unused */
+	.quad 0x0000000000000000	/* 0xfe8 - unused */
+	.quad 0x0000000000000000	/* 0xff0 - unused */
+	.quad 0x0000000000000000	/* 0xff8 - unused */
+
+/*
+ * Array of pointers to per-CPU GDTs
+ */
+ENTRY(cpu_gdt_table)
+	.long gdt_table			/* CPU0's GDT */
+#if CONFIG_SMP
+	.fill (NR_CPUS-1),4,0		/* pointers to other CPU's GDT */
+#endif
+	.long	0
+
+/* ------------------------------------------------------------------ */
+#else  /* !CONFIG_MKI */
+/*
+ * The Global Descriptor Table contains 28 quadwords, per-CPU.
+ */
+ENTRY(gdt_table)
+
 ENTRY(cpu_gdt_table)
 	.quad 0x0000000000000000	/* NULL descriptor */
 	.quad 0x0000000000000000	/* 0x0b reserved */
@@ -524,3 +608,6 @@ ENTRY(cpu_gdt_table)
 #ifdef CONFIG_SMP
 	.fill (NR_CPUS-1)*GDT_ENTRIES,8,0 /* other CPU's GDT */
 #endif
+
+#endif /* !CONFIG_MKI */
+
diff -puN arch/i386/kernel/process.c~Kernel-Win4Lin3-2.6.6 arch/i386/kernel/process.c
--- linux-2.6.7-xx3/arch/i386/kernel/process.c~Kernel-Win4Lin3-2.6.6	2004-06-25 19:03:02.595182256 -0400
+++ linux-2.6.7-xx3-xiphux/arch/i386/kernel/process.c	2004-06-25 19:08:46.715867960 -0400
@@ -50,6 +50,9 @@
 #ifdef CONFIG_MATH_EMULATION
 #include <asm/math_emu.h>
 #endif
+#ifdef CONFIG_MKI
+#include <asm/mki.h>
+#endif
 
 #include <linux/irq.h>
 #include <linux/err.h>
@@ -536,6 +539,11 @@ struct task_struct fastcall * __switch_t
 	asm volatile("movl %%fs,%0":"=m" (*(int *)&prev->fs));
 	asm volatile("movl %%gs,%0":"=m" (*(int *)&prev->gs));
 
+#ifdef CONFIG_MKI
+	if (unlikely(next_p->mki_task_info))
+		CALL_MKI_HOOK(MKI_HOOK_SWITCH_TO, next_p, NULL);
+#endif
+
 	/*
 	 * Restore %fs and %gs if needed.
 	 */
diff -puN arch/i386/kernel/signal.c~Kernel-Win4Lin3-2.6.6 arch/i386/kernel/signal.c
--- linux-2.6.7-xx3/arch/i386/kernel/signal.c~Kernel-Win4Lin3-2.6.6	2004-06-25 19:03:02.598181800 -0400
+++ linux-2.6.7-xx3-xiphux/arch/i386/kernel/signal.c	2004-06-25 19:08:46.716867808 -0400
@@ -24,6 +24,9 @@
 #include <asm/ucontext.h>
 #include <asm/uaccess.h>
 #include <asm/i387.h>
+#ifdef CONFIG_MKI
+#include <asm/mki.h>
+#endif
 #include "sigframe.h"
 
 #define DEBUG_SIG 0
@@ -558,8 +561,16 @@ int fastcall do_signal(struct pt_regs *r
 	 * kernel mode. Just return without doing anything
 	 * if so.
 	 */
+#ifdef CONFIG_MKI
+	/* When we are in vm86 mode don't do the quick return */
+	if (((regs->eflags & 0x20000) == 0) &&
+	    ((regs->xcs & 3) != 3)) {
+		return 1;
+	}
+#else
 	if ((regs->xcs & 3) != 3)
 		return 1;
+#endif
 
 	if (current->flags & PF_FREEZE) {
 		refrigerator(0);
@@ -609,6 +620,41 @@ __attribute__((regparm(3)))
 void do_notify_resume(struct pt_regs *regs, sigset_t *oldset,
 		      __u32 thread_info_flags)
 {
+#ifdef CONFIG_MKI
+	/*
+	 * Call the Return to User hook.  Note that we never clear
+	 * _TIF_MKI_RETUSER on MKI marked processes (the only ones on which
+	 * it is set) because we always want to use the iret return path.
+	 * BTW, we know that this code below is a bit ugly but it saves us
+	 * having to add code to entry.S which needs to be the shortest path
+	 * possible for non-MKI tasks.  Since we need to have interrupts
+	 * enabled while we do the RET_USER hook, we have to recheck to see
+	 * whether NEED_RESCHED got set.  Note further that the RET_USER hook
+	 * "handles" signals, which is why we loop while SIGPENDING is set.
+	 */
+	if (thread_info_flags & _TIF_MKI_RETUSER) {
+		/*
+		 * Set the local SIGPENDING so we call the RETUSER hook
+		 * at least once.
+		 */
+		thread_info_flags |= _TIF_SIGPENDING;
+		while (thread_info_flags &
+		    (_TIF_SIGPENDING | _TIF_NEED_RESCHED)) {
+			if (thread_info_flags & _TIF_SIGPENDING) {
+				thread_info_flags &= ~_TIF_SIGPENDING;
+				asm volatile("sti");
+				CALL_MKI_HOOK(MKI_HOOK_RET_USER, regs, NULL);
+			}
+			if (thread_info_flags & _TIF_NEED_RESCHED) {
+				thread_info_flags &= ~_TIF_NEED_RESCHED;
+				schedule();
+			}
+			asm volatile("cli");
+			thread_info_flags |= current_thread_info()->flags;
+		}
+	}
+#endif /* CONFIG_MKI */
+
 	/* Pending single-step? */
 	if (thread_info_flags & _TIF_SINGLESTEP) {
 		regs->eflags |= TF_MASK;
diff -puN arch/i386/kernel/vm86.c~Kernel-Win4Lin3-2.6.6 arch/i386/kernel/vm86.c
--- linux-2.6.7-xx3/arch/i386/kernel/vm86.c~Kernel-Win4Lin3-2.6.6	2004-06-25 19:03:02.600181496 -0400
+++ linux-2.6.7-xx3-xiphux/arch/i386/kernel/vm86.c	2004-06-25 19:03:02.656172984 -0400
@@ -107,6 +107,15 @@ struct pt_regs * fastcall save_v86_state
 	 */
 	local_irq_enable();
 
+#ifdef CONFIG_MKI
+	if (current->mki_task_info) {
+		/* If this is an MKI task, then just return regs.  MKI
+		 * special handling will be done in do_notify_resume()
+		 * if necessary.
+		 */
+		return (struct pt_regs *) regs;
+	}
+#endif
 	if (!current->thread.vm86_info) {
 		printk("no vm86_info: BAD\n");
 		do_exit(SIGSEGV);
diff -puN /dev/null arch/i386/mki/Makefile
--- /dev/null	2004-05-31 17:36:38.000000000 -0400
+++ linux-2.6.7-xx3-xiphux/arch/i386/mki/Makefile	2004-06-25 19:03:02.658172680 -0400
@@ -0,0 +1,5 @@
+#
+# Makefile for arch/i386/mki subdirectory
+#
+obj-y	:=	mki.o
+
diff -puN /dev/null arch/i386/mki/mki.c
--- /dev/null	2004-05-31 17:36:38.000000000 -0400
+++ linux-2.6.7-xx3-xiphux/arch/i386/mki/mki.c	2004-06-25 19:09:58.461960896 -0400
@@ -0,0 +1,93 @@
+/*
+ * Copyright 1999-2003 by NeTraverse Inc.
+ * This source code is provided "AS IS", free of charge
+ * and without restrictions.
+ * NeTraverse (and it's third party suppliers and licensors) make no warranty
+ * to its use, performance, or suitability for any particular purpose.
+ * In no event, shall NeTraverse (and it's third party suppliers and licensors)
+ * be liable for any damages resulting in the use of this source code.
+ * The entire risk arising out of the use of this source code remains
+ * with you.
+ *
+ ***********************************************************************
+ *  This software may be used and distributed according to the terms
+ *  of the GNU General Public License, incorporated herein by reference.
+ */
+/*
+ * These hooks will get populated by the mki-adapter module
+ */
+
+#include <linux/config.h>
+#include <linux/version.h>
+#include <linux/module.h>
+#include <linux/types.h>
+#include <linux/spinlock.h>
+
+#include <asm/system.h>
+#include <asm/mki.h>
+#include <asm/mkiversion.h>
+
+char mki_ver[] = "mki_version_3_1_2";
+
+void mhi_void_hook(void *parm1, void *parm2)
+{
+	return;
+}
+
+void (*mhi_hooks[])(void *, void *) =
+{
+	&mhi_void_hook, /* MKI_HOOK_RET_USER */
+	&mhi_void_hook, /* MKI_HOOK_SWITCH_TO */
+	&mhi_void_hook, /* MKI_HOOK_SWITCH_AWAY */
+	&mhi_void_hook, /* MKI_HOOK_EXIT */
+	&mhi_void_hook, /* MKI_HOOK_SWAP */
+};
+
+void mki_ret_user(void * regs)
+{
+	CALL_MKI_HOOK(MKI_HOOK_RET_USER, regs, NULL);
+}
+
+EXPORT_SYMBOL_NOVERS(mhi_void_hook);
+EXPORT_SYMBOL_NOVERS(mhi_hooks);
+EXPORT_SYMBOL_NOVERS(mki_ret_user);
+extern void mki_process_trapret(void);
+EXPORT_SYMBOL_NOVERS(mki_process_trapret);
+
+//some data that we need for the other modules
+#include <linux/sched.h>
+#include <asm/processor.h>
+#include <asm/desc.h>
+
+extern struct desc_struct idt_table[], gdt_table[];
+
+EXPORT_SYMBOL_NOVERS(init_tss);
+EXPORT_SYMBOL_NOVERS(idt_table);
+EXPORT_SYMBOL_NOVERS(idt_descr);
+EXPORT_SYMBOL_NOVERS(gdt_table);
+EXPORT_SYMBOL_NOVERS(cpu_gdt_descr);
+EXPORT_SYMBOL_NOVERS(mmu_cr4_features);
+
+//and some functions
+#include <linux/mm.h>
+EXPORT_SYMBOL_NOVERS(handle_mm_fault);
+EXPORT_SYMBOL_NOVERS(make_pages_present);
+#ifdef CONFIG_SMP
+EXPORT_SYMBOL_NOVERS(mki_kick_if_running);
+extern void flush_tlb_all(void);
+EXPORT_SYMBOL_NOVERS(flush_tlb_all);
+#endif
+
+EXPORT_SYMBOL_NOVERS(__pmd_alloc);
+EXPORT_SYMBOL_NOVERS(pte_alloc_map);
+
+#include <asm/uaccess.h>
+EXPORT_SYMBOL_NOVERS(search_exception_tables);
+extern asmlinkage int sys_mprotect(unsigned long, size_t, unsigned long);
+EXPORT_SYMBOL_NOVERS(sys_mprotect);
+extern asmlinkage long sys_ftruncate(int, unsigned long);
+EXPORT_SYMBOL_NOVERS(sys_ftruncate);
+extern asmlinkage int sys_munmap(unsigned long, size_t);
+EXPORT_SYMBOL_NOVERS(sys_munmap);
+asmlinkage void do_exit(long code);
+EXPORT_SYMBOL_NOVERS(do_exit);
diff -puN arch/i386/mm/fault.c~Kernel-Win4Lin3-2.6.6 arch/i386/mm/fault.c
--- linux-2.6.7-xx3/arch/i386/mm/fault.c~Kernel-Win4Lin3-2.6.6	2004-06-25 19:03:02.603181040 -0400
+++ linux-2.6.7-xx3-xiphux/arch/i386/mm/fault.c	2004-06-25 19:08:43.102417288 -0400
@@ -369,7 +369,12 @@ bad_area:
 
 bad_area_nosemaphore:
 	/* User mode accesses just cause a SIGSEGV */
+
+#ifdef CONFIG_MKI
+	if (user_mode(regs)) {
+#else
 	if (error_code & 4) {
+#endif
 		/* 
 		 * Valid to do another page fault here because this one came 
 		 * from user space.
diff -puN include/asm-i386/desc.h~Kernel-Win4Lin3-2.6.6 include/asm-i386/desc.h
--- linux-2.6.7-xx3/include/asm-i386/desc.h~Kernel-Win4Lin3-2.6.6	2004-06-25 19:03:02.606180584 -0400
+++ linux-2.6.7-xx3-xiphux/include/asm-i386/desc.h	2004-06-25 19:08:44.019277904 -0400
@@ -11,7 +11,12 @@
 
 #include <asm/mmu.h>
 
+#ifdef CONFIG_MKI
+#define MM_CONTEXT_HAS_LDT_FIELD	1
+extern struct desc_struct *cpu_gdt_table[NR_CPUS];
+#else
 extern struct desc_struct cpu_gdt_table[NR_CPUS][GDT_ENTRIES];
+#endif
 
 struct Xgt_desc_struct {
 	unsigned short size;
diff -puN /dev/null include/asm-i386/mki.h
--- /dev/null	2004-05-31 17:36:38.000000000 -0400
+++ linux-2.6.7-xx3-xiphux/include/asm-i386/mki.h	2004-06-25 19:03:02.666171464 -0400
@@ -0,0 +1,52 @@
+/*
+ * Copyright 1999-2003 by NeTraverse Inc.
+ * This source code is provided "AS IS", free of charge
+ * and without restrictions.
+ * NeTraverse (and it's third party suppliers and licensors) make no warranty
+ * to its use, performance, or suitability for any particular purpose.
+ * In no event, shall NeTraverse (and it's third party suppliers and licensors)
+ * be liable for any damages resulting in the use of this source code.
+ * The entire risk arising out of the use of this source code remains
+ * with you.
+ *
+ ***********************************************************************
+ *  This software may be used and distributed according to the terms
+ *  of the GNU General Public License, incorporated herein by reference.
+ */
+
+
+#ifdef CONFIG_MKI
+#ifndef INCLUDE_MKI_H
+#define INCLUDE_MKI_H
+
+extern void mhi_void_hook(void *, void *);
+extern void (*mhi_hooks[])(void *, void *);
+extern void mki_ret_user(void *regs);
+
+#define CALL_MKI_HOOK(hook, arg1, arg2)  mhi_hooks[hook](arg1, arg2)
+
+/* for mki-adapter module */
+#define MKI_HOOK_TABLE_EXISTS	1
+
+#ifdef CONFIG_SMP
+/*
+ * For mki-adapter: this version of the MKI has a mki_kick_if_running()
+ * function.
+ */
+#define MKI_HAS_MKI_KICK_IF_RUNNING    1
+extern void mki_kick_if_running(struct task_struct *);
+#endif /* CONFIG_SMP */
+
+
+/* constants for hook table  */
+#define MKI_HOOK_RET_USER 		0
+#define MKI_HOOK_SWITCH_TO 		1
+#define MKI_HOOK_SWITCH_AWAY 		2
+#define MKI_HOOK_EXIT			3
+#define MKI_HOOK_SWAP			4
+
+#define MKI_HARD_PRIORITY 	1
+#define MKI_NORMAL_PRIORITY 	6
+
+#endif /* INCLUDE_MKI_H */
+#endif /* CONFIG_MKI */
diff -puN /dev/null include/asm-i386/mkiversion.h
--- /dev/null	2004-05-31 17:36:38.000000000 -0400
+++ linux-2.6.7-xx3-xiphux/include/asm-i386/mkiversion.h	2004-06-25 19:03:02.667171312 -0400
@@ -0,0 +1,25 @@
+/*
+ * Copyright 1999-2003 by NeTraverse Inc.
+ * This source code is provided "AS IS", free of charge
+ * and without restrictions.
+ * NeTraverse (and it's third party suppliers and licensors) make no warranty
+ * to its use, performance, or suitability for any particular purpose.
+ * In no event, shall NeTraverse (and it's third party suppliers and licensors)
+ * be liable for any damages resulting in the use of this source code.
+ * The entire risk arising out of the use of this source code remains
+ * with you.
+ *
+ ***********************************************************************
+ *  This software may be used and distributed according to the terms
+ *  of the GNU General Public License, incorporated herein by reference.
+ */
+
+#ifdef CONFIG_MKI
+#ifndef INCLUDE_MKI_VERSION_H
+#define INCLUDE_MKI_VERSION_H
+
+int mki_version_3_0_1 = 0;
+EXPORT_SYMBOL_NOVERS(mki_version_3_0_1);
+
+#endif /* INCLUDE_MKI_H */
+#endif /* CONFIG_MKI */
diff -puN include/asm-i386/segment.h~Kernel-Win4Lin3-2.6.6 include/asm-i386/segment.h
--- linux-2.6.7-xx3/include/asm-i386/segment.h~Kernel-Win4Lin3-2.6.6	2004-06-25 19:03:02.608180280 -0400
+++ linux-2.6.7-xx3-xiphux/include/asm-i386/segment.h	2004-06-25 19:03:02.668171160 -0400
@@ -1,6 +1,93 @@
 #ifndef _ASM_SEGMENT_H
 #define _ASM_SEGMENT_H
 
+#ifdef CONFIG_MKI
+
+/*
+ * The layout of the per-CPU GDT under Linux with CONFIG_MKI:
+ *
+ *   0 - 0x000 - null
+ *   1 - 0x008 - reserved
+ *   2 - 0x010 - reserved
+ *   3 - 0x018 - reserved
+ *
+ *   4 - 0x020 - unused			<==== new cacheline
+ *   5 - 0x028 - unused
+ *
+ *  ------- start of TLS (Thread-Local Storage) segments:
+ *
+ *   6 - 0x030 - TLS segment #1	[ glibc's TLS segment ]
+ *   7 - 0x038 - TLS segment #2	[ Wine's %fs Win32 segment ]
+ *   8 - 0x040 - TLS segment #3
+ *   9 - 0x048 - reserved
+ *  10 - 0x050 - reserved
+ *  11 - 0x058 - reserved
+ *
+ *  12 - 0x060
+ *     |	- reserved for MKI use
+ *     V
+ * 479 - 0xef8
+ *
+ *  ------- start of kernel segments:
+ * 484 - 0xf20 - kernel code segment	<==== new cacheline
+ * 485 - 0xf28 - kernel data segment
+ * 486 - 0xf30 - default user CS
+ * 487 - 0xf38 - default user DS
+ * 488 - 0xf40 - TSS
+ * 489 - 0xf48 - LDT
+ * 490 - 0xf50 - PNPBIOS support (16->32 gate)
+ * 491 - 0xf58 - PNPBIOS support
+ * 492 - 0xf60 - PNPBIOS support
+ * 493 - 0xf68 - PNPBIOS support
+ * 494 - 0xf78 - PNPBIOS support
+ * 495 - 0xf78 - APM BIOS support
+ * 496 - 0xf80 - APM BIOS support
+ * 497 - 0xf88 - APM BIOS support
+ * 498 - 0xf90 - unused
+ * 497 - 0xf98 - unused
+ * 498 - 0xfa0 - unused
+ * 499 - 0xfa8 - unused
+ * 500 - 0xfb0 - unused
+ * 501 - 0xfb8 - TSS for double fault handler
+ * 502 - 0xfc0 - unused
+ *     |       - unused
+ *     V       - unused
+ * 511 - 0xff8 - unused
+ */
+#define GDT_ENTRY_TLS_ENTRIES	3
+#define GDT_ENTRY_TLS_MIN	6
+#define GDT_ENTRY_TLS_MAX 	(GDT_ENTRY_TLS_MIN + GDT_ENTRY_TLS_ENTRIES - 1)
+
+#define TLS_SIZE (GDT_ENTRY_TLS_ENTRIES * 8)
+
+#define GDT_ENTRY_DEFAULT_USER_CS	486
+#define __USER_CS (GDT_ENTRY_DEFAULT_USER_CS * 8 + 3)
+
+#define GDT_ENTRY_DEFAULT_USER_DS	487
+#define __USER_DS (GDT_ENTRY_DEFAULT_USER_DS * 8 + 3)
+
+#define GDT_ENTRY_KERNEL_BASE		484
+
+#define GDT_ENTRY_KERNEL_CS		(GDT_ENTRY_KERNEL_BASE + 0)
+#define __KERNEL_CS (GDT_ENTRY_KERNEL_CS * 8)
+
+#define GDT_ENTRY_KERNEL_DS		(GDT_ENTRY_KERNEL_BASE + 1)
+#define __KERNEL_DS (GDT_ENTRY_KERNEL_DS * 8)
+
+#define GDT_ENTRY_TSS			(GDT_ENTRY_KERNEL_BASE + 4)
+#define GDT_ENTRY_LDT			(GDT_ENTRY_KERNEL_BASE + 5)
+
+#define GDT_ENTRY_PNPBIOS_BASE		(GDT_ENTRY_KERNEL_BASE + 6)
+#define GDT_ENTRY_APMBIOS_BASE		(GDT_ENTRY_KERNEL_BASE + 11)
+
+#define GDT_ENTRY_DOUBLEFAULT_TSS	501
+
+/*
+ * The GDT has 512 entries
+ */
+#define GDT_ENTRIES 512
+
+#else /* !CONFIG_MKI */
 /*
  * The layout of the per-CPU GDT under Linux:
  *
@@ -77,6 +164,7 @@
  * The GDT has 32 entries
  */
 #define GDT_ENTRIES 32
+#endif  /* !CONFIG_MKI */
 
 #define GDT_SIZE (GDT_ENTRIES * 8)
 
diff -puN include/asm-i386/thread_info.h~Kernel-Win4Lin3-2.6.6 include/asm-i386/thread_info.h
--- linux-2.6.7-xx3/include/asm-i386/thread_info.h~Kernel-Win4Lin3-2.6.6	2004-06-25 19:03:02.611179824 -0400
+++ linux-2.6.7-xx3-xiphux/include/asm-i386/thread_info.h	2004-06-25 19:03:02.668171160 -0400
@@ -144,6 +144,9 @@ static inline unsigned long current_stac
 #define TIF_SINGLESTEP		4	/* restore singlestep on return to user mode */
 #define TIF_IRET		5	/* return with iret */
 #define TIF_SYSCALL_AUDIT	7	/* syscall auditing active */
+#ifdef CONFIG_MKI
+#define TIF_MKI_RETUSER		15	/* need to call MKI retuser hook */
+#endif
 #define TIF_POLLING_NRFLAG	16	/* true if poll_idle() is polling TIF_NEED_RESCHED */
 
 #define _TIF_SYSCALL_TRACE	(1<<TIF_SYSCALL_TRACE)
@@ -153,6 +156,9 @@ static inline unsigned long current_stac
 #define _TIF_SINGLESTEP		(1<<TIF_SINGLESTEP)
 #define _TIF_IRET		(1<<TIF_IRET)
 #define _TIF_SYSCALL_AUDIT	(1<<TIF_SYSCALL_AUDIT)
+#ifdef CONFIG_MKI
+#define _TIF_MKI_RETUSER	(1<<TIF_MKI_RETUSER)
+#endif
 #define _TIF_POLLING_NRFLAG	(1<<TIF_POLLING_NRFLAG)
 
 /* work to do on interrupt/exception return */
diff -puN include/linux/init_task.h~Kernel-Win4Lin3-2.6.6 include/linux/init_task.h
--- linux-2.6.7-xx3/include/linux/init_task.h~Kernel-Win4Lin3-2.6.6	2004-06-25 19:03:02.614179368 -0400
+++ linux-2.6.7-xx3-xiphux/include/linux/init_task.h	2004-06-25 19:08:43.352379288 -0400
@@ -251,6 +251,7 @@ extern struct group_info init_groups;
 	.private_pages	= LIST_HEAD_INIT(tsk.private_pages),		\
 	.private_pages_count = 0,					\
 	CFQIONICE_PRIO							\
+    	MKI_INIT_TASK							\
 }
 
 
diff -puN include/linux/sched.h~Kernel-Win4Lin3-2.6.6 include/linux/sched.h
--- linux-2.6.7-xx3/include/linux/sched.h~Kernel-Win4Lin3-2.6.6	2004-06-25 19:03:02.619178608 -0400
+++ linux-2.6.7-xx3-xiphux/include/linux/sched.h	2004-06-25 19:08:57.631208576 -0400
@@ -659,6 +659,14 @@ struct task_struct {
 #endif
 	struct list_head private_pages; /* list of pages privately reserved by process */
 	int private_pages_count; /* number of pages in the above list */
+
+#ifdef CONFIG_MKI
+/* mki task info structure */
+	void *mki_task_info;
+#define MKI_INIT_TASK .mki_task_info = NULL,
+#else
+#define MKI_INIT_TASK
+#endif
 };
 
 static inline pid_t process_group(struct task_struct *tsk)
diff -puN kernel/exit.c~Kernel-Win4Lin3-2.6.6 kernel/exit.c
--- linux-2.6.7-xx3/kernel/exit.c~Kernel-Win4Lin3-2.6.6	2004-06-25 19:03:02.624177848 -0400
+++ linux-2.6.7-xx3-xiphux/kernel/exit.c	2004-06-25 19:08:57.635207968 -0400
@@ -29,6 +29,10 @@
 #include <asm/pgtable.h>
 #include <asm/mmu_context.h>
 
+#ifdef CONFIG_MKI
+#include <asm/mki.h>
+#endif
+
 extern void sem_exit (void);
 extern struct task_struct *child_reaper;
 
@@ -795,6 +799,12 @@ asmlinkage NORET_TYPE void do_exit(long 
 	}
 
 	acct_process(code);
+
+#ifdef CONFIG_MKI
+	if (unlikely(tsk->mki_task_info))
+		CALL_MKI_HOOK(MKI_HOOK_EXIT, NULL, NULL);
+#endif
+
 	__exit_mm(tsk);
 
 	exit_sem(tsk);
diff -puN kernel/fork.c~Kernel-Win4Lin3-2.6.6 kernel/fork.c
--- linux-2.6.7-xx3/kernel/fork.c~Kernel-Win4Lin3-2.6.6	2004-06-25 19:03:02.627177392 -0400
+++ linux-2.6.7-xx3-xiphux/kernel/fork.c	2004-06-25 19:08:57.636207816 -0400
@@ -917,6 +917,10 @@ struct task_struct *copy_process(unsigne
 	atomic_inc(&p->user->processes);
 	get_group_info(p->group_info);
 
+#ifdef CONFIG_MKI
+	p->mki_task_info = NULL;
+#endif
+
 	/*
 	 * If multiple threads are within copy_process(), then this check
 	 * triggers too late. This doesn't hurt, the check is only there
diff -puN kernel/sched.c~Kernel-Win4Lin3-2.6.6 kernel/sched.c
--- linux-2.6.7-xx3/kernel/sched.c~Kernel-Win4Lin3-2.6.6	2004-06-25 19:03:02.633176480 -0400
+++ linux-2.6.7-xx3-xiphux/kernel/sched.c	2004-06-25 19:08:57.783185472 -0400
@@ -53,6 +53,9 @@
 #ifdef CONFIG_EBS
 #include <linux/proc_fs.h>
 #endif
+#ifdef CONFIG_MKI
+#include <asm/mki.h>
+#endif
 #include <asm/tlb.h>
 
 #include <asm/unistd.h>
@@ -2418,6 +2421,24 @@ out:
 	return success;
 }
 
+#if defined(CONFIG_MKI) && defined(CONFIG_SMP)
+/*
+ * If there is a possibility that task p is running in user mode
+ * (per force on a different CPU), then kick that CPU into the
+ * kernel so that we can deliver MKI events (kind of like signals).
+ */
+void mki_kick_if_running(task_t *p)
+{
+	unsigned long flags;
+	runqueue_t *rq;
+
+	rq = task_rq_lock(p, &flags);
+	if (task_running(rq, p) && (task_cpu(p) != smp_processor_id()))
+		smp_send_reschedule(task_cpu(p));
+	task_rq_unlock(rq, &flags);
+}
+#endif /* CONFIG_MKI && CONFIG_SMP */
+
 int fastcall wake_up_process(task_t * p)
 {
 	return try_to_wake_up(p, TASK_STOPPED |
@@ -2863,6 +2884,11 @@ task_t * context_switch(runqueue_t *rq, 
 	struct mm_struct *mm = next->mm;
 	struct mm_struct *oldmm = prev->active_mm;
 
+#ifdef CONFIG_MKI
+	if (unlikely(prev->mki_task_info))
+		CALL_MKI_HOOK(MKI_HOOK_SWITCH_AWAY, prev, NULL);
+#endif
+
 	if (unlikely(!mm)) {
 		next->active_mm = oldmm;
 		atomic_inc(&oldmm->mm_count);
diff -puN mm/vmscan.c~Kernel-Win4Lin3-2.6.6 mm/vmscan.c
--- linux-2.6.7-xx3/mm/vmscan.c~Kernel-Win4Lin3-2.6.6	2004-06-25 19:03:02.637175872 -0400
+++ linux-2.6.7-xx3-xiphux/mm/vmscan.c	2004-06-25 19:08:57.797183344 -0400
@@ -38,6 +38,10 @@
 
 #include <linux/swapops.h>
 
+#ifdef CONFIG_MKI
+#include <asm/mki.h>
+#endif
+
 /*
  * From 1 .. 100.  Higher means less swappy.
  */
@@ -1012,6 +1016,17 @@ int try_to_free_pages(struct zone **zone
 		sc.nr_scanned = 0;
 		sc.nr_reclaimed = 0;
 		sc.priority = priority;
+
+#ifdef CONFIG_MKI
+		if (priority < DEF_PRIORITY) {
+			int mki_swap_pri = (priority < (DEF_PRIORITY - 1)) ?
+			    MKI_HARD_PRIORITY : MKI_NORMAL_PRIORITY;
+
+			CALL_MKI_HOOK(MKI_HOOK_SWAP, (void *) mki_swap_pri,
+			    (void *) 0);
+		}
+#endif
+
 		shrink_caches(zones, &sc);
 		shrink_slab(sc.nr_scanned, gfp_mask);
 		if (reclaim_state) {

_
