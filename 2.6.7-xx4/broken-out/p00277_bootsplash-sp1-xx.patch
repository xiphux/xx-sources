---

 kernel/Kconfig-extra.xx                                      |    0 
 linux-2.6.7-xx4-xiphux/drivers/video/bootsplash/Kconfig      |   17 
 linux-2.6.7-xx4-xiphux/drivers/video/bootsplash/bootsplash.c |  127 +++++-
 linux-2.6.7-xx4-xiphux/drivers/video/bootsplash/bootsplash.h |    4 
 linux-2.6.7-xx4-xiphux/drivers/video/bootsplash/decode-jpg.c |   70 +++
 linux-2.6.7-xx4-xiphux/drivers/video/bootsplash/render.c     |  219 ++++++++++-
 linux-2.6.7-xx4-xiphux/drivers/video/console/fbcon.c         |    7 
 linux-2.6.7-xx4-xiphux/drivers/video/vesafb.c                |    2 
 8 files changed, 432 insertions(+), 14 deletions(-)

diff -puN drivers/video/bootsplash/Kconfig~bootsplash-sp1-xx drivers/video/bootsplash/Kconfig
--- linux-2.6.7-xx4/drivers/video/bootsplash/Kconfig~bootsplash-sp1-xx	2004-06-28 02:40:58.000000000 -0400
+++ linux-2.6.7-xx4-xiphux/drivers/video/bootsplash/Kconfig	2004-06-28 03:00:20.352569968 -0400
@@ -6,12 +6,27 @@ menu "Bootsplash configuration"
 
 config BOOTSPLASH
 	bool "Bootup splash screen"
-	depends on FRAMEBUFFER_CONSOLE=y && FB_VESA && BLK_DEV_INITRD=y
+	depends on FRAMEBUFFER_CONSOLE=y && BLK_DEV_INITRD=y
 	default n
         ---help---
           This option enables the Linux bootsplash screen. For more
           information on the bootsplash screen have a look at
           http://www.bootsplash.org/.
           If you are unsure, say N
+
+config BSSP
+	bool "Enable experimental bootsplash features"
+	depends on BOOTSPLASH && EXPERIMENTAL
+	help
+	  This will enable some experimental features for bootsplash
+	  written by spock, namely 32bpp modes and support for
+	  framebuffers other than vesafb.
+
+	  Unfortunately, bootsplash cannot take advantage of the
+	  framebuffer acceleration routines yet.  Your console may
+	  become slower.
+
+	  Please note that this is still experimental code.
+
 endmenu
 
diff -puN drivers/video/bootsplash/bootsplash.c~bootsplash-sp1-xx drivers/video/bootsplash/bootsplash.c
--- linux-2.6.7-xx4/drivers/video/bootsplash/bootsplash.c~bootsplash-sp1-xx	2004-06-28 02:40:58.000000000 -0400
+++ linux-2.6.7-xx4-xiphux/drivers/video/bootsplash/bootsplash.c	2004-06-28 02:40:58.000000000 -0400
@@ -9,6 +9,8 @@
  *
  *        Ideas & SuSE screen work by Ken Wimer, <wimer@suse.de>
  *
+ *  32 and 24bpp support & bugfixes by Michal Januszewski <spock@gentoo.org>
+ *
  *  For more information on this code check http://www.bootsplash.org/
  */
 
@@ -29,7 +31,9 @@
 #include "bootsplash.h"
 #include "decode-jpg.h"
 
+#ifndef CONFIG_BSSP
 extern struct fb_ops vesafb_ops;
+#endif
 
 #define SPLASH_VERSION "3.1.4-2004/02/19"
 
@@ -116,7 +120,11 @@ static int boxextract(unsigned char *buf
     return 12;
 }
 
-static void boxit(unsigned char *pic, int bytes, unsigned char *buf, int num, int percent, int overpaint)
+static void boxit(unsigned char *pic, int bytes, unsigned char *buf, int num, int percent, int overpaint
+#ifdef CONFIG_BSSP
+		, int bpp
+#endif
+		)
 {
     int x, y, i, p, doblend, r, g, b, a, add;
     unsigned short data1[4];
@@ -124,7 +132,11 @@ static void boxit(unsigned char *pic, in
     unsigned short data2[4];
     unsigned char cols2[16];
     unsigned char *bufend;
+#ifdef CONFIG_BSSP
+	u8 *picp;
+#else
     unsigned short *picp;
+#endif
     unsigned int stipple[32], sti, stin, stinn, stixs, stixe, stiys, stiye;
     int xs, xe, ys, ye, xo, yo;
 
@@ -239,11 +251,19 @@ static void boxit(unsigned char *pic, in
 	    }
 	    add = (xs & 1);
 	    add ^= (add ^ y) & 1 ? 1 : 3;		/* 2x2 ordered dithering */
+#ifdef CONFIG_BSSP
+		picp = pic + xs * (bpp >> 3) + y * bytes;
+#else
 	    picp = (unsigned short *)(pic + xs * 2 + y * bytes);
+#endif
 	    for (x = xs; x <= xe; x++) {
 		if (!(sti & 0x80000000)) {
 		    sti <<= 1;
+#ifdef CONFIG_BSSP
+		picp += (bpp >> 3);
+#else
 		    picp++;
+#endif
 		    add ^= 3;
 		    continue;
 		}
@@ -259,16 +279,70 @@ static void boxit(unsigned char *pic, in
 		g = cols2[1];
 		b = cols2[2];
 		if (a != 255) {
+#ifdef CONFIG_BSSP
+			if (bpp == 8) {
+		 		    i = *picp;
+				r = ((i >> 5 & 0x07) * (255 - a) + r * a) / 255;
+				g = ((i >> 2 & 0x07) * (255 - a) + g * a) / 255;
+				b = ((i & 0x03) * (255 - a) + b * a) / 255;
+			} else if (bpp == 16) {
+				i = *(u16*)picp;
+				    r = ((i >> 8 & 0xf8) * (255 - a) + r * a) / 255;
+				    g = ((i >> 3 & 0xfc) * (255 - a) + g * a) / 255;
+				    b = ((i << 3 & 0xf8) * (255 - a) + b * a) / 255;
+			} else if (bpp == 24) {
+				i = *(u32*)picp & 0xffffff;
+				r = ((i >> 16 & 0xff) * (255 - a) + r * a) / 255;
+				g = ((i >> 8 & 0xff)  * (255 - a) + g * a) / 255;
+				b = ((i & 0xff)       * (255 - a) + b * a) / 255;
+			} else if (bpp == 32) {
+				i = *(u32*)picp;
+				r = ((i >> 16 & 0xff) * (255 - a) + r * a) / 255;
+				g = ((i >> 8 & 0xff)  * (255 - a) + g * a) / 255;
+				b = ((i & 0xff)       * (255 - a) + b * a) / 255;
+			}
+#else
 		    i = *picp;
 		    r = ((i >> 8 & 0xf8) * (255 - a) + r * a) / 255;
 		    g = ((i >> 3 & 0xfc) * (255 - a) + g * a) / 255;
 		    b = ((i << 3 & 0xf8) * (255 - a) + b * a) / 255;
+#endif
 		}
   #define CLAMP(x) ((x) >= 256 ? 255 : (x))
+#ifdef CONFIG_BSSP
+		if (bpp == 8) {
+			i = (((CLAMP(r + add*2+1) >> 5) & 7) << 5) |
+			    (((CLAMP(g + add    ) >> 5) & 7) << 2) |
+			    ((CLAMP(b + add*2+1) >> 6) & 3);
+			*(u8*)picp = i;
+			picp++;
+		} else if (bpp == 16) {
+		i = ((CLAMP(r + add*2+1) & 0xf8) <<  8) |
+		    ((CLAMP(g + add    ) & 0xfc) <<  3) |
+		    ((CLAMP(b + add*2+1)       ) >>  3);
+			*(u16*)picp = i;
+			picp += 2;
+		} else if (bpp == 24) {
+			i = ((CLAMP(r + add*2+1)) << 16) |
+			    (CLAMP(g + add) << 8) |
+			    (CLAMP(b + add*2+1));
+			*(u16*)picp = i;
+			picp += 2;
+			*(u8*)picp = (i >> 16);
+			picp++;
+		} else if (bpp == 32) {
+			i = ((CLAMP(r + add*2+1)) << 16) |
+			    (CLAMP(g + add) << 8) |
+			    (CLAMP(b + add*2+1));
+			*(u32*)picp = i;
+			picp += 4;
+		}
+#else
 		i = ((CLAMP(r + add*2+1) & 0xf8) <<  8) |
 		    ((CLAMP(g + add    ) & 0xfc) <<  3) |
 		    ((CLAMP(b + add*2+1)       ) >>  3);
 		*picp++ = i;
+#endif
 		add ^= 3;
 	    }
 	}
@@ -523,7 +597,11 @@ static int splash_getraw(unsigned char *
 	    printk(" found, but has oversized text area!\n");
 	    return -1;
 	}
-	if (!vc_cons[unit].d || info->fbops != &vesafb_ops) {
+	if (!vc_cons[unit].d
+#ifndef CONFIG_BSSP
+			|| info->fbops != &vesafb_ops
+#endif
+			) {
 	    splash_free(vc, info);
 	    printk(" found, but framebuffer can't handle it!\n");
 	    return -1;
@@ -573,7 +651,11 @@ int splash_verbose(void)
     info = registered_fb[(int)con2fb_map[fg_console]];
     if (!info->silent_screen_base)
 	return 0;
-    splashcopy(info->silent_screen_base, info->screen_base, info->var.yres, info->var.xres, info->fix.line_length, info->fix.line_length);
+    splashcopy(info->silent_screen_base, info->screen_base, info->var.yres, info->var.xres, info->fix.line_length, info->fix.line_length
+#ifdef CONFIG_BSSP
+		    , info->var.bits_per_pixel
+#endif
+		    );
     info->screen_base = info->silent_screen_base;
     info->silent_screen_base = 0;
     return 1;
@@ -607,11 +689,12 @@ int splash_prepare(struct vc_data *vc, s
         width = info->var.xres;
         height = info->var.yres;
         depth = info->var.bits_per_pixel;
+#ifndef CONFIG_BSSP
 	if (depth != 16) {	/* Other targets might need fixing */
 		splash_off(info);
 		return -2;
 	}
-
+#endif
 	sbytes = ((width + 15) & ~15) * (depth >> 3);
 	size = sbytes * ((height + 15) & ~15);
 	if (size != info->splash_pic_size)
@@ -639,11 +722,19 @@ int splash_prepare(struct vc_data *vc, s
 		} else {
 			if (vc->vc_splash_data->splash_sboxcount)
 				boxit(info->splash_pic, sbytes, vc->vc_splash_data->splash_sboxes,
-					vc->vc_splash_data->splash_sboxcount, vc->vc_splash_data->splash_percent, 0);
+					vc->vc_splash_data->splash_sboxcount, vc->vc_splash_data->splash_percent, 0
+#ifdef CONFIG_BSSP
+					, info->var.bits_per_pixel
+#endif
+					);
 
 			if (!info->silent_screen_base)
 				info->silent_screen_base = info->screen_base;
-			splashcopy(info->silent_screen_base, info->splash_pic, info->var.yres, info->var.xres, info->fix.line_length, sbytes);
+			splashcopy(info->silent_screen_base, info->splash_pic, info->var.yres, info->var.xres, info->fix.line_length, sbytes
+#ifdef CONFIG_BSSP
+					, info->var.bits_per_pixel
+#endif
+					);
 			info->screen_base = info->silent_screen_base + info->fix.line_length * info->var.yres;
 		}
 	} else if (info->silent_screen_base)
@@ -658,7 +749,11 @@ int splash_prepare(struct vc_data *vc, s
 	info->splash_pic_size = size;
 	info->splash_bytes = sbytes;
 	if (vc->vc_splash_data->splash_boxcount)
-		boxit(info->splash_pic, sbytes, vc->vc_splash_data->splash_boxes, vc->vc_splash_data->splash_boxcount, vc->vc_splash_data->splash_percent, 0);
+		boxit(info->splash_pic, sbytes, vc->vc_splash_data->splash_boxes, vc->vc_splash_data->splash_boxcount, vc->vc_splash_data->splash_percent, 0
+#ifdef CONFIG_BSSP
+				, info->var.bits_per_pixel
+#endif
+				);
 	if (vc->vc_splash_data->splash_state)
 		info->splash_data = vc->vc_splash_data;
 	else
@@ -790,8 +885,16 @@ static int splash_write_proc(struct file
 					splash_prepare(vc, info);
 			} else {
 				if (vc->vc_splash_data->splash_silentjpeg && vc->vc_splash_data->splash_dosilent && info->silent_screen_base)
-					boxit(info->silent_screen_base, info->fix.line_length, vc->vc_splash_data->splash_sboxes, vc->vc_splash_data->splash_sboxcount, vc->vc_splash_data->splash_percent, 1);
-				boxit(info->screen_base, info->fix.line_length, vc->vc_splash_data->splash_boxes, vc->vc_splash_data->splash_boxcount, vc->vc_splash_data->splash_percent, 1);
+					boxit(info->silent_screen_base, info->fix.line_length, vc->vc_splash_data->splash_sboxes, vc->vc_splash_data->splash_sboxcount, vc->vc_splash_data->splash_percent, 1
+#ifdef CONFIG_BSSP
+							, info->var.bits_per_pixel
+#endif
+							);
+				boxit(info->screen_base, info->fix.line_length, vc->vc_splash_data->splash_boxes, vc->vc_splash_data->splash_boxcount, vc->vc_splash_data->splash_percent, 1
+#ifdef CONFIG_BSSP
+						, info->var.bits_per_pixel
+#endif
+						);
 			}
 		}
 		return count;
@@ -886,7 +989,11 @@ void splash_init(void)
 		return;
 	vc = vc_cons[fg_console].d;
 	info = registered_fb[fg_console];
-	if (!vc || !info || info->var.bits_per_pixel != 16)
+	if (!vc || !info
+#ifndef CONFIG_BSSP
+			|| info->var.bits_per_pixel != 16
+#endif
+			)
 		return;
 #ifdef CONFIG_PROC_FS
 	splash_proc_register();
diff -puN drivers/video/bootsplash/bootsplash.h~bootsplash-sp1-xx drivers/video/bootsplash/bootsplash.h
--- linux-2.6.7-xx4/drivers/video/bootsplash/bootsplash.h~bootsplash-sp1-xx	2004-06-28 02:40:58.000000000 -0400
+++ linux-2.6.7-xx4-xiphux/drivers/video/bootsplash/bootsplash.h	2004-06-28 02:40:58.000000000 -0400
@@ -22,7 +22,11 @@ extern void splash_putcs(struct splash_d
 			const unsigned short *s, int count, int ypos, int xpos);
 extern void splash_putc(struct splash_data *sd, struct vc_data *vc, struct fb_info *info,
 			int c, int ypos, int xpos);
+#ifdef CONFIG_BSSP
+extern void splashcopy(u8 *dst, u8 *src, int height, int width, int dstbytes, int srcbytes, int bpp);
+#else
 extern void splashcopy(u8 *dst, u8 *src, int height, int width, int dstbytes, int srcbytes);
+#endif
 extern void splash_clear(struct splash_data *sd, struct vc_data *vc, struct fb_info *info, int sy,
 			int sx, int height, int width);
 extern void splash_bmove(struct splash_data *sd, struct vc_data *vc, struct fb_info *info, int sy,
diff -puN drivers/video/bootsplash/decode-jpg.c~bootsplash-sp1-xx drivers/video/bootsplash/decode-jpg.c
--- linux-2.6.7-xx4/drivers/video/bootsplash/decode-jpg.c~bootsplash-sp1-xx	2004-06-28 02:40:58.000000000 -0400
+++ linux-2.6.7-xx4-xiphux/drivers/video/bootsplash/decode-jpg.c	2004-06-28 02:40:58.000000000 -0400
@@ -85,7 +85,11 @@ static void scaleidctqtab __P((PREC *, P
 
 static void initcol __P((PREC[][64]));
 
+#ifdef CONFIG_BSSP
+static void col221111 __P((int *, unsigned char *, int, int));
+#else
 static void col221111 __P((int *, unsigned char *, int));
+#endif
 static void col221111_16 __P((int *, unsigned char *, int));
 
 /*********************************/
@@ -370,8 +374,17 @@ struct jpeg_decdata *decdata;
 			idct(decdata->dcts + 320, decdata->out + 320, decdata->dquant[2], IFIX(0.5), max[5]);
 
 			switch (depth) {
+#ifdef CONFIG_BSSP
+			case 32:
+				col221111(decdata->out, pic + (my * 16 * mcusx + mx) * 16 * 4, mcusx * 16 * 4, 32);
+				break;
+#endif
 			case 24:
+#ifdef CONFIG_BSSP
+				col221111(decdata->out, pic + (my * 16 * mcusx + mx) * 16 * 3, mcusx * 16 * 3, 24);
+#else
 				col221111(decdata->out, pic + (my * 16 * mcusx + mx) * 16 * 3, mcusx * 16 * 3);
+#endif
 				break;
 			case 16:
 				col221111_16(decdata->out, pic + (my * 16 * mcusx + mx) * (16 * 2), mcusx * (16 * 2));
@@ -849,6 +862,27 @@ PREC q[][64];
   STORECLAMP(p[(xout) * 3 + 2], y + cb)		\
 )
 
+#ifdef CONFIG_BSSP
+#define PIC_32(yin, xin, p, xout)		\
+(						\
+  y = outy[(yin) * 8 + xin],			\
+  STORECLAMP(p[(xout) * 4 + 0], y + cb),	\
+  STORECLAMP(p[(xout) * 4 + 1], y - cg),	\
+  STORECLAMP(p[(xout) * 4 + 2], y + cr),	\
+  STORECLAMP(p[(xout) * 4 + 3], 0)		\
+)
+
+#define PIC_8(yin, xin, p, xout, add)		 \
+(						 \
+  y = outy[(yin) * 8 + xin],			 \
+  p[(xout)] = 					 \
+      (((CLAMP((y + cr + add*2+1)) >> 5) & 0x07) << 5) | \
+      (((CLAMP((y - cg + add    )) >> 5) & 0x07) << 2) | \
+      (((CLAMP((y + cb + add*2+1)) >> 6) & 0x03))   \
+)
+
+#endif
+
 #ifdef __LITTLE_ENDIAN
 #define PIC_16(yin, xin, p, xout, add)		 \
 (                                                \
@@ -892,6 +926,17 @@ PREC q[][64];
   PIC(xin / 4 * 8 + 1, (xin & 3) * 2 + 1, pic1, xin * 2 + 1)	\
 )
 
+#ifdef CONFIG_BSSP
+#define PIC221111_32(xin)						\
+(									\
+  CBCRCG(0, xin),							\
+  PIC_32(xin / 4 * 8 + 0, (xin & 3) * 2 + 0, pic0, xin * 2 + 0),	\
+  PIC_32(xin / 4 * 8 + 0, (xin & 3) * 2 + 1, pic0, xin * 2 + 1),	\
+  PIC_32(xin / 4 * 8 + 1, (xin & 3) * 2 + 0, pic1, xin * 2 + 0),	\
+  PIC_32(xin / 4 * 8 + 1, (xin & 3) * 2 + 1, pic1, xin * 2 + 1)		\
+)
+#endif
+
 #define PIC221111_16(xin)                                               \
 (                                                               	\
   CBCRCG(0, xin),                                               	\
@@ -901,10 +946,26 @@ PREC q[][64];
   PIC_16(xin / 4 * 8 + 1, (xin & 3) * 2 + 1, pic1, xin * 2 + 1, 2)      \
 )
 
+#ifdef CONFIG_BSSP
+#define PIC221111_8(xin)						\
+(									\
+  CBCRCG(0, xin),							\
+  PIC_8(xin / 4 * 8 + 0, (xin & 3) * 2 + 0, pic0, xin * 2 + 0, 3),	\
+  PIC_8(xin / 4 * 8 + 0, (xin & 3) * 2 + 1, pic0, xin * 2 + 1, 0),	\
+  PIC_8(xin / 4 * 8 + 1, (xin & 3) * 2 + 0, pic1, xin * 2 + 0, 1),	\
+  PIC_8(xin / 4 * 8 + 1, (xin & 3) * 2 + 1, pic1, xin * 2 + 1, 2)	\
+)
+
+static void col221111(out, pic, width, size)
+#else
 static void col221111(out, pic, width)
+#endif
 int *out;
 unsigned char *pic;
 int width;
+#ifdef CONFIG_BSSP
+int size;
+#endif
 {
 	int i, j, k;
 	unsigned char *pic0, *pic1;
@@ -918,7 +979,16 @@ int width;
 	for (i = 2; i > 0; i--) {
 		for (j = 4; j > 0; j--) {
 			for (k = 0; k < 8; k++) {
+#ifdef CONFIG_BSSP
+				if (size == 24)
+					PIC221111(k);
+				else if (size == 32)
+					PIC221111_32(k);
+				else
+					PIC221111_8(k);
+#else
 				PIC221111(k);
+#endif
 			}
 			outc += 8;
 			outy += 16;
diff -puN drivers/video/bootsplash/render.c~bootsplash-sp1-xx drivers/video/bootsplash/render.c
--- linux-2.6.7-xx4/drivers/video/bootsplash/render.c~bootsplash-sp1-xx	2004-06-28 02:40:58.000000000 -0400
+++ linux-2.6.7-xx4-xiphux/drivers/video/bootsplash/render.c	2004-06-28 02:40:58.000000000 -0400
@@ -25,16 +25,25 @@ void splash_putcs(struct splash_data *sd
 	u32 dd, fgx, bgx;
 	u16 c = scr_readw(s);
 
+#ifdef CONFIG_BSSP
+	int bytespp = (info->var.bits_per_pixel >> 3);
+#endif
 	int fg_color, bg_color, transparent;
         fg_color = attr_fgcol(fgshift, c);
         bg_color = attr_bgcol(bgshift, c);
 	transparent = sd->splash_color == bg_color;
 	xpos = xpos * vc->vc_font.width + sd->splash_text_xo;
 	ypos = ypos * vc->vc_font.height + sd->splash_text_yo;
+#ifdef CONFIG_BSSP
+	splashsrc = (u8 *)(info->splash_pic + ypos * info->splash_bytes + xpos * bytespp);
+        dst = (u8 *)(info->screen_base + ypos * info->fix.line_length + xpos * bytespp);
+#else
         splashsrc = (u8 *)(info->splash_pic + ypos * info->splash_bytes + xpos * 2);
         dst = (u8 *)(info->screen_base + ypos * info->fix.line_length + xpos * 2);
+#endif
 
 	fgx = ((u32 *)info->pseudo_palette)[fg_color];
+#ifndef CONFIG_BSSP
 	if (transparent && sd->splash_color == 15) {
 	    if (fgx == 0xffea)
 		fgx = 0xfe4a;
@@ -43,6 +52,7 @@ void splash_putcs(struct splash_data *sd
 	    else if (fgx == 0xffff)
 		fgx = 0x52aa;
 	}
+#endif
 	bgx = ((u32 *)info->pseudo_palette)[bg_color];
 	d = 0;
 
@@ -51,6 +61,45 @@ void splash_putcs(struct splash_data *sd
 	    src = vc->vc_font.data + (c & charmask) * vc->vc_font.height * ((vc->vc_font.width + 7) >> 3);
 
 	    for (y = 0; y < vc->vc_font.height; y++) {
+#ifdef CONFIG_BSSP
+			switch (info->var.bits_per_pixel) {
+
+			case 32:
+				for (x = 0; x < vc->vc_font.width; x++) {
+
+					if ((x & 7) == 0)
+						d = *src++;
+					if (d & 0x80)
+						dd = fgx;
+					else
+						dd = transparent ? *(u32 *)splashsrc : bgx;
+
+					d <<= 1;
+					splashsrc += 4;
+					fb_writel(dd, dst);
+					dst += 4;
+				}
+				break;
+			case 24:
+				for (x = 0; x < vc->vc_font.width; x++) {
+
+					if ((x & 7) == 0)
+						d = *src++;
+					if (d & 0x80)
+						dd = fgx;
+					else
+						dd = transparent ? (*(u32 *)splashsrc & 0xffffff) : bgx;
+
+					d <<= 1;
+					splashsrc += 3;
+					fb_writew(dd & 0xffff, dst);
+					dst += 2;
+					fb_writeb((dd >> 16), dst);
+					dst++;
+				}
+				break;
+			case 16:
+#endif
 		for (x = 0; x < vc->vc_font.width; x += 2) {
 		    if ((x & 7) == 0)
 			d = *src++;
@@ -68,11 +117,23 @@ void splash_putcs(struct splash_data *sd
 		    fb_writel(dd, dst);
 		    dst += 4;
 		}
+#ifdef CONFIG_BSSP
+				break;
+#else
 		dst += info->fix.line_length - vc->vc_font.width * 2;
 		splashsrc += info->splash_bytes - vc->vc_font.width * 2;
+#endif
 	    }
+#ifdef CONFIG_BSSP
+			dst += info->fix.line_length - vc->vc_font.width * bytespp;
+			splashsrc += info->splash_bytes - vc->vc_font.width * bytespp;
+	    	}
+		dst -= info->fix.line_length * vc->vc_font.height - vc->vc_font.width * bytespp;
+		splashsrc -= info->splash_bytes * vc->vc_font.height - vc->vc_font.width * bytespp;
+#else
 	    dst -= info->fix.line_length * vc->vc_font.height - vc->vc_font.width * 2;
 	    splashsrc -= info->splash_bytes * vc->vc_font.height - vc->vc_font.width * 2;
+#endif
 	}
 }
 
@@ -83,12 +144,23 @@ static void splash_renderc(struct splash
 	u8 *dst, *splashsrc;
 	unsigned int d, x, y;
 
+#ifdef CONFIG_BSSP
+	int bytespp = (info->var.bits_per_pixel >> 3);
+	if (ypos * info->splash_bytes + xpos * bytespp > info->splash_pic_size)
+#else
 	if (ypos * info->splash_bytes + xpos * 2 > info->splash_pic_size)
+#endif
 		return;
 
+#ifdef CONFIG_BSSP
+	splashsrc = (u8 *)(info->splash_pic + ypos * info->splash_bytes + xpos * bytespp);
+	dst = (u8 *)(info->screen_base + ypos * info->fix.line_length + xpos * bytespp);
+#else
 	splashsrc = (u8 *)(info->splash_pic + ypos * info->splash_bytes + xpos * 2);
 	dst = (u8 *)(info->screen_base + ypos * info->fix.line_length + xpos * 2);
+#endif
 	fgx = ((u32 *)info->pseudo_palette)[fg_color];
+#ifndef CONFIG_BSSP
 	if (transparent && sd->splash_color == 15) {
 	    if (fgx == 0xffea)
 		fgx = 0xfe4a;
@@ -97,9 +169,49 @@ static void splash_renderc(struct splash
 	    else if (fgx == 0xffff)
 		fgx = 0x52aa;
 	}
+#endif
 	bgx = ((u32 *)info->pseudo_palette)[bg_color];
 	d = 0;
 	for (y = 0; y < height; y++) {
+#ifdef CONFIG_BSSP
+		switch (info->var.bits_per_pixel)
+		{
+		case 32:
+			for (x = 0; x < width; x++) {
+
+				if ((x & 7) == 0)
+					d = *src++;
+				if (d & 0x80)
+					dd = fgx;
+				else
+					dd = transparent ? *(u32 *)splashsrc : bgx;
+
+				d <<= 1;
+				splashsrc += 4;
+				fb_writel(dd, dst);
+				dst += 4;
+			}
+			break;
+		case 24:
+			for (x = 0; x < width; x++) {
+
+				if ((x & 7) == 0)
+					d = *src++;
+				if (d & 0x80)
+					dd = fgx;
+				else
+					dd = transparent ? (*(u32 *)splashsrc & 0xffffff) : bgx;
+
+				d <<= 1;
+				splashsrc += 3;
+				fb_writew(dd & 0xffff, dst);
+				dst += 2;
+				fb_writeb((dd >> 16), dst);
+				dst++;
+			}
+			break;
+		case 16:
+#endif
 	    for (x = 0; x < width; x += 2) {
 		if ((x & 7) == 0)
 		    d = *src++;
@@ -117,8 +229,15 @@ static void splash_renderc(struct splash
 		fb_writel(dd, dst);
 		dst += 4;
 	    }
+#ifdef CONFIG_BSSP
+			break;
+		}
+		dst += info->fix.line_length - width * bytespp;
+		splashsrc += info->splash_bytes - width * bytespp;
+#else
 	    dst += info->fix.line_length - width * 2;
 	    splashsrc += info->splash_bytes - width * 2;
+#endif
 	}
 }
 
@@ -134,13 +253,37 @@ void splash_putc(struct splash_data *sd,
 	splash_renderc(sd, info, attr_fgcol(fgshift, c), attr_bgcol(bgshift, c), src, ypos, xpos, vc->vc_font.height, vc->vc_font.width);
 }
 
-void splashcopy(u8 *dst, u8 *src, int height, int width, int dstbytes, int srcbytes)
+void splashcopy(u8 *dst, u8 *src, int height, int width, int dstbytes, int srcbytes
+#ifdef CONFIG_BSSP
+		, int bpp
+#endif
+		)
 {
 	int i;
 
 	while (height-- > 0) {
 	    u32 *p = (u32 *)dst;
 	    u32 *q = (u32 *)src;
+#ifdef CONFIG_BSSP
+		switch (bpp) {
+
+		case 32:
+			for (i=0; i < width; i++)
+				fb_writel(*q++,p++);
+			break;
+		case 24:
+			for (i=0; i < (width*3/4); i++)
+				fb_writel(*q++,p++);
+			if ((width*3) % 4) {
+				if (width & 2)
+					fb_writeb(*(u8*)q,(u8*)p);
+				else if (width & 1) {
+					fb_writew(*(u16*)q,(u16*)p);
+					fb_writeb(*(((u8*)q)+2),((u8*)p)+2);
+				}
+			}
+		case 16:
+#endif
 	    for (i=0; i < width/4; i++) {
 		fb_writel(*q++,p++);
 		fb_writel(*q++,p++);
@@ -149,31 +292,90 @@ void splashcopy(u8 *dst, u8 *src, int he
 		fb_writel(*q++,p++);
 	    if (width & 1)
 		fb_writew(*(u16*)q,(u16*)p);
+#ifdef CONFIG_BSSP
+			break;
+		}
+#endif
 	    dst += dstbytes;
 	    src += srcbytes;
 	}
 }
 
-static void splashset(u8 *dst, int height, int width, int dstbytes, u32 bgx) {
+static void splashset(u8 *dst, int height, int width, int dstbytes, u32 bgx
+#ifdef CONFIG_BSSP
+		, int bpp
+#endif
+		) {
 	int i;
 
+#ifdef CONFIG_BSSP
+	if (bpp == 16)
+#endif
 	bgx |= bgx << 16;
+#ifdef CONFIG_BSSP
+	else if (bpp == 8) {
+		bgx |= bgx << 8;
+		bgx |= bgx << 16;
+	}
+#endif
 	while (height-- > 0) {
+#ifdef CONFIG_BSSP
+		u8 *p = dst;
+
+		switch (bpp) {
+
+		case 32:
+			for (i=0; i < width; i++) {
+				fb_writel(bgx, p);
+				p += 4;
+			}
+			break;
+		case 24:
+			for (i=0; i < width; i++) {
+				fb_writew((bgx & 0xffff),(u16*)p);
+				p += 2;
+				fb_writeb((bgx >> 16),p++);
+			}
+		case 16:
+#else
 	    u32 *p = (u32 *)dst;
+#endif
 	    for (i=0; i < width/4; i++) {
+#ifdef CONFIG_BSSP
+		fb_writel(bgx,p); p += 4;
+		fb_writel(bgx,p); p += 4;
+#else
 		fb_writel(bgx,p++);
 		fb_writel(bgx,p++);
+#endif
+	    }
+#ifdef CONFIG_BSSP
+	if (width & 2) {
+		fb_writel(bgx,p);
+		p += 4;
 	    }
+#else
 	    if (width & 2)
 		fb_writel(bgx,p++);
+#endif
 	    if (width & 1)
 		fb_writew(bgx,(u16*)p);
+#ifdef CONFIG_BSSP
+			break;
+		}
+#endif
 	    dst += dstbytes;
 	}
 }
 
 static void splashfill(struct fb_info *info, int sy, int sx, int height, int width) {
+#ifdef CONFIG_BSSP
+	splashcopy((u8 *)(info->screen_base + sy * info->fix.line_length + sx * (info->var.bits_per_pixel >> 3)),
+		   (u8 *)(info->splash_pic + sy * info->splash_bytes + sx * (info->var.bits_per_pixel >> 3)),
+		   height, width, info->fix.line_length, info->splash_bytes, info->var.bits_per_pixel);
+#else
 	splashcopy((u8 *)(info->screen_base + sy * info->fix.line_length + sx * 2), (u8 *)(info->splash_pic + sy * info->splash_bytes + sx * 2), height, width, info->fix.line_length, info->splash_bytes);
+#endif
 }
 
 void splash_clear(struct splash_data *sd, struct vc_data *vc, struct fb_info *info, int sy,
@@ -193,9 +395,17 @@ void splash_clear(struct splash_data *sd
 		splashfill(info, sy, sx, height, width);
 		return;
 	}
+#ifdef CONFIG_BSSP
+	dst = (u8 *)(info->screen_base + sy * info->fix.line_length + sx * (info->var.bits_per_pixel >> 3));
+#else
         dst = (u8 *)(info->screen_base + sy * info->fix.line_length + sx * 2);
+#endif
 	bgx = ((u32 *)info->pseudo_palette)[bg_color];
+#ifdef CONFIG_BSSP
+	splashset(dst, height, width, info->fix.line_length, bgx, info->var.bits_per_pixel);
+#else
 	splashset(dst, height, width, info->fix.line_length, bgx);
+#endif
 }
 
 void splash_bmove(struct splash_data *sd, struct vc_data *vc, struct fb_info *info, int sy,
@@ -322,8 +532,13 @@ void splash_blank(struct splash_data *sd
 {
 	if (blank) {
 		if (info->silent_screen_base)
+#ifdef CONFIG_BSSP
+		    splashset((u8 *)info->silent_screen_base, info->var.yres, info->var.xres, info->fix.line_length, 0, info->var.bits_per_pixel);
+		splashset((u8 *)info->screen_base, info->var.yres, info->var.xres, info->fix.line_length, 0, info->var.bits_per_pixel);
+#else
 		    splashset((u8 *)info->silent_screen_base, info->var.yres, info->var.xres, info->fix.line_length, 0);
 		splashset((u8 *)info->screen_base, info->var.yres, info->var.xres, info->fix.line_length, 0);
+#endif
 	} else {
 		if (info->silent_screen_base)
 			splash_prepare(vc, info);
diff -puN drivers/video/console/fbcon.c~bootsplash-sp1-xx drivers/video/console/fbcon.c
--- linux-2.6.7-xx4/drivers/video/console/fbcon.c~bootsplash-sp1-xx	2004-06-28 02:40:58.000000000 -0400
+++ linux-2.6.7-xx4-xiphux/drivers/video/console/fbcon.c	2004-06-28 02:40:58.000000000 -0400
@@ -212,16 +212,23 @@ static void fb_flashcursor(void *private
 	    info->cursor.rop == ROP_COPY || !vc || !CON_IS_VISIBLE(vc)
 	    || registered_fb[(int) con2fb_map[vc->vc_num]] != info)
 		return;
+#ifdef CONFIG_BSSP
+	acquire_console_sem();
+#endif
 	info->cursor.enable ^= 1;
 #ifdef CONFIG_BOOTSPLASH
 	if (info->splash_data) {
+#ifndef CONFIG_BSSP
 		acquire_console_sem();
+#endif
 		splash_cursor(info->splash_data, info, &info->cursor);
 		release_console_sem();
 		return;
 	}
 #endif
+#ifndef CONFIG_BSSP
 	acquire_console_sem();
+#endif
 	info->fbops->fb_cursor(info, &info->cursor);
 	release_console_sem();
 }
diff -puN drivers/video/vesafb.c~bootsplash-sp1-xx drivers/video/vesafb.c
--- linux-2.6.7-xx4/drivers/video/vesafb.c~bootsplash-sp1-xx	2004-06-28 02:40:58.000000000 -0400
+++ linux-2.6.7-xx4-xiphux/drivers/video/vesafb.c	2004-06-28 02:40:58.000000000 -0400
@@ -504,7 +504,7 @@ static void vesafb_platform_release(stru
 static int __init vesafb_probe(struct device *device);
 #endif
 
-#ifndef CONFIG_BOOTSPLASH
+#if !defined(CONFIG_BOOTSPLASH) || defined(CONFIG_BSSP)
 static
 #endif
 struct fb_ops vesafb_ops = {
diff -puN kernel/Kconfig-extra.xx~bootsplash-sp1-xx kernel/Kconfig-extra.xx

_
