
Configurable kernel CFLAGS, by bssteph.


---

 linux-2.6.6-xx2-xiphux/arch/i386/Kconfig          |   41 ++++++++++++++++++++++
 linux-2.6.6-xx2-xiphux/arch/i386/Makefile         |    8 ++++
 linux-2.6.6-xx2-xiphux/arch/i386/kernel/traps.c   |    9 ++++
 linux-2.6.6-xx2-xiphux/arch/x86_64/Kconfig        |   41 ++++++++++++++++++++++
 linux-2.6.6-xx2-xiphux/arch/x86_64/Makefile       |    8 ++++
 linux-2.6.6-xx2-xiphux/arch/x86_64/kernel/traps.c |    4 ++
 6 files changed, 110 insertions(+), 1 deletion(-)

diff -puN arch/i386/Kconfig~cflags-selection arch/i386/Kconfig
--- linux-2.6.6-xx2/arch/i386/Kconfig~cflags-selection	2004-05-28 03:08:56.069046680 -0400
+++ linux-2.6.6-xx2-xiphux/arch/i386/Kconfig	2004-05-28 03:08:56.086044096 -0400
@@ -1234,6 +1234,47 @@ config DEBUG_SLAB
 	  allocation as well as poisoning memory on free to catch use of freed
 	  memory.
 
+config CFLAGS_EDIT
+	bool "CFLAGS hacking"
+	default n
+	help
+	  This allows you to append to or override the CFLAGS set for your
+	  machine. Changing CFLAGS is commonly a very bad idea, because
+	  Kernel Hackers Know Best. However if you wish to mess around
+	  with your CFLAGS anyway, enable this and enter your CFLAGS
+	  string to append below.
+
+	  The original intent of this option is to allow for use of flags that
+	  don't really affect the result so much as gcc itself - maybe you
+	  don't want to guess branch probabilities for some reason. That said,
+	  we recognize that there's a nicely sized market for people who just
+	  want to tinker, and this is why this option exists.
+
+	  A lot of things may become unpredictable when using aggressive CFLAGS
+	  in the kernel. Don't complain about _anything_ until disabling this
+	  option.
+
+	  If you have any doubt, say N.
+
+config CFLAGS_STRING
+	string "New CFLAGS"
+	depends on CFLAGS_EDIT
+	default "CHANGE ME"
+	help
+	  Enter your new CFLAGS here, using appropriate syntax for gcc. If you
+	  don't know what this means, flee now.
+
+config CFLAGS_OVERRIDE
+	bool "Override existing CFLAGS"
+	depends on CFLAGS_EDIT
+	default n
+	help
+	  This allows you to unset any CFLAGS generated from processor selections
+	  made at the top of the config.
+
+	  There is no reason to enable this. You always want the bare minimum for
+	  your processor. Say N.
+
 config MAGIC_SYSRQ
 	bool "Magic SysRq key"
 	depends on DEBUG_KERNEL
diff -puN arch/i386/Makefile~cflags-selection arch/i386/Makefile
--- linux-2.6.6-xx2/arch/i386/Makefile~cflags-selection	2004-05-28 03:08:56.072046224 -0400
+++ linux-2.6.6-xx2-xiphux/arch/i386/Makefile	2004-05-28 03:08:56.090043488 -0400
@@ -62,6 +62,14 @@ CFLAGS += $(call check_gcc,-fno-unit-at-
 
 CFLAGS += $(cflags-y)
 
+ifdef CONFIG_CFLAGS_EDIT
+	ifdef CONFIG_CFLAGS_OVERRIDE
+		CFLAGS = $(shell echo $(CONFIG_CFLAGS_STRING) | sed -e 's/"//g')
+	else
+		CFLAGS += $(shell echo $(CONFIG_CFLAGS_STRING) | sed -e 's/"//g')
+	endif
+endif
+
 # Default subarch .c files
 mcore-y  := mach-default
 
diff -puN arch/i386/kernel/traps.c~cflags-selection arch/i386/kernel/traps.c
--- linux-2.6.6-xx2/arch/i386/kernel/traps.c~cflags-selection	2004-05-28 03:08:56.074045920 -0400
+++ linux-2.6.6-xx2-xiphux/arch/i386/kernel/traps.c	2004-05-28 03:09:25.902511304 -0400
@@ -156,6 +156,9 @@ void print_context_stack(struct task_str
 {
 	unsigned long addr;
 
+#ifdef CONFIG_CFLAGS_EDIT
+	printk("CFLAGS_EDIT\n");
+#endif
 	while (!kstack_end(stack)) {
 		addr = *stack++;
 		if (kernel_text_address(addr)) {
@@ -349,7 +352,11 @@ void die(const char * str, struct pt_reg
 	nl = 1;
 #endif
 #ifdef CONFIG_DEBUG_PAGEALLOC
-	printk("DEBUG_PAGEALLOC");
+	printk("DEBUG_PAGEALLOC ");
+	nl = 1;
+#endif
+#ifdef CONFIG_CFLAGS_EDIT
+	printk("CFLAGS_EDIT");
 	nl = 1;
 #endif
 	if (nl)
diff -puN arch/x86_64/Kconfig~cflags-selection arch/x86_64/Kconfig
--- linux-2.6.6-xx2/arch/x86_64/Kconfig~cflags-selection	2004-05-28 03:08:56.077045464 -0400
+++ linux-2.6.6-xx2-xiphux/arch/x86_64/Kconfig	2004-05-28 03:08:56.100041968 -0400
@@ -485,6 +485,47 @@ config FRAME_POINTER
 	 frame pointer through inline assembly (semaphores etc.)
 	 Normally you should say N.
 
+config CFLAGS_EDIT
+	bool "CFLAGS hacking"
+	default n
+	help
+	  This allows you to append to or override the CFLAGS set for your
+	  machine. Changing CFLAGS is commonly a very bad idea, because
+	  Kernel Hackers Know Best. However if you wish to mess around
+	  with your CFLAGS anyway, enable this and enter your CFLAGS
+	  string to append below.
+
+	  The original intent of this option is to allow for use of flags that
+	  don't really affect the result so much as gcc itself - maybe you
+	  don't want to guess branch probabilities for some reason. That said,
+	  we recognize that there's a nicely sized market for people who just
+	  want to tinker, and this is why this option exists.
+
+	  A lot of things may become unpredictable when using aggressive CFLAGS
+	  in the kernel. Don't complain about _anything_ until disabling this
+	  option.
+
+	  If you have any doubt, say N.
+
+config CFLAGS_STRING
+	string "New CFLAGS"
+	depends on CFLAGS_EDIT
+	default "CHANGE ME"
+	help
+	  Enter your new CFLAGS here, using appropriate syntax for gcc. If you
+	  don't know what this means, flee now.
+
+config CFLAGS_OVERRIDE
+	bool "Override existing CFLAGS"
+	depends on CFLAGS_EDIT
+	default n
+	help
+	  This allows you to unset any CFLAGS generated from processor selections
+	  made at the top of the config.
+
+	  There is no reason to enable this. You always want the bare minimum for
+	  your processor. Say N.
+
 config IOMMU_DEBUG
        depends on GART_IOMMU && DEBUG_KERNEL
        bool "Enable IOMMU debugging"
diff -puN arch/x86_64/Makefile~cflags-selection arch/x86_64/Makefile
--- linux-2.6.6-xx2/arch/x86_64/Makefile~cflags-selection	2004-05-28 03:08:56.079045160 -0400
+++ linux-2.6.6-xx2-xiphux/arch/x86_64/Makefile	2004-05-28 03:08:56.101041816 -0400
@@ -58,6 +58,14 @@ endif
 # unfortunately it makes reading oopses harder.
 CFLAGS += $(call check_gcc,-funit-at-a-time,)
 
+ifdef CONFIG_CFLAGS_EDIT
+	ifdef CONFIG_CFLAGS_OVERRIDE
+		CFLAGS = $(shell echo $(CONFIG_CFLAGS_STRING) | sed -e 's/"//g')
+	else
+		CFLAGS += $(shell echo $(CONFIG_CFLAGS_STRING) | sed -e 's/"//g')
+	endif
+endif
+
 head-y := arch/x86_64/kernel/head.o arch/x86_64/kernel/head64.o arch/x86_64/kernel/init_task.o
 
 libs-y 					+= arch/x86_64/lib/
diff -puN arch/x86_64/kernel/traps.c~cflags-selection arch/x86_64/kernel/traps.c
--- linux-2.6.6-xx2/arch/x86_64/kernel/traps.c~cflags-selection	2004-05-28 03:08:56.081044856 -0400
+++ linux-2.6.6-xx2-xiphux/arch/x86_64/kernel/traps.c	2004-05-28 03:08:56.102041664 -0400
@@ -138,6 +138,10 @@ void show_trace(unsigned long *stack)
 
 	printk("\nCall Trace:");
 	i = 0; 
+
+#ifdef CONFIG_CFLAGS_EDIT
+       printk("\nCFLAGS_EDIT\n");
+#endif
 	
 	estack_end = in_exception_stack(cpu, (unsigned long)stack); 
 	if (estack_end) { 

_
