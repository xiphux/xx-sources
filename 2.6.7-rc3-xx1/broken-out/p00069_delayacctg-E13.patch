---

 linux-2.6.7-rc3-xx1-xiphux/fs/proc/array.c            |   17 +++++
 linux-2.6.7-rc3-xx1-xiphux/fs/proc/base.c             |   18 +++++
 linux-2.6.7-rc3-xx1-xiphux/include/linux/sched.h      |   59 ++++++++++++++++++
 linux-2.6.7-rc3-xx1-xiphux/include/linux/taskdelays.h |   20 ++++++
 linux-2.6.7-rc3-xx1-xiphux/init/Kconfig               |    9 ++
 linux-2.6.7-rc3-xx1-xiphux/kernel/sched.c             |   21 ++++++
 linux-2.6.7-rc3-xx1-xiphux/mm/memory.c                |    9 ++
 7 files changed, 150 insertions(+), 3 deletions(-)

diff -puN fs/proc/array.c~delayacctg-E13 fs/proc/array.c
--- linux-2.6.7-rc3-xx1/fs/proc/array.c~delayacctg-E13	2004-06-10 20:10:09.894333208 -0400
+++ linux-2.6.7-rc3-xx1-xiphux/fs/proc/array.c	2004-06-10 20:10:39.027904232 -0400
@@ -441,3 +441,20 @@ int proc_pid_statm(struct task_struct *t
 	return sprintf(buffer,"%d %d %d %d %d %d %d\n",
 		       size, resident, shared, text, lib, data, 0);
 }
+
+int proc_pid_delay(struct task_struct *task, char * buffer)
+{
+	int res;
+
+	res  = sprintf(buffer,"%lu %lu %lu %lu %lu %lu %lu\n",
+		       get_delay(task,runs),
+		       get_delay(task,runcpu_total),
+		       get_delay(task,waitcpu_total),
+		       get_delay(task,iowait_total),
+		       get_delay(task,num_iowaits),
+		       get_delay(task,mem_iowait_total),
+		       get_delay(task,num_memwaits)
+
+		);
+	return res;
+}
diff -puN fs/proc/base.c~delayacctg-E13 fs/proc/base.c
--- linux-2.6.7-rc3-xx1/fs/proc/base.c~delayacctg-E13	2004-06-10 20:10:10.239280768 -0400
+++ linux-2.6.7-rc3-xx1-xiphux/fs/proc/base.c	2004-06-10 20:10:12.630917184 -0400
@@ -104,6 +104,10 @@ enum pid_directory_inos {
 	PROC_TID_CPU_RATE_CAP,
 	PROC_TID_CPU_SHARES,
 #endif
+#ifdef CONFIG_DELAY_ACCT
+        PROC_TID_DELAY_ACCT,
+        PROC_TGID_DELAY_ACCT,
+#endif
 	PROC_TID_FD_DIR = 0x8000,	/* 0x8000-0xffff */
 };
 
@@ -134,6 +138,9 @@ static struct pid_entry tgid_base_stuff[
 #ifdef CONFIG_SECURITY
 	E(PROC_TGID_ATTR,      "attr",    S_IFDIR|S_IRUGO|S_IXUGO),
 #endif
+#ifdef CONFIG_DELAY_ACCT
+	E(PROC_TGID_DELAY_ACCT,"delay",   S_IFREG|S_IRUGO),
+#endif
 #ifdef CONFIG_KALLSYMS
 	E(PROC_TGID_WCHAN,     "wchan",   S_IFREG|S_IRUGO),
 #endif
@@ -163,6 +170,9 @@ static struct pid_entry tid_base_stuff[]
 #ifdef CONFIG_SECURITY
 	E(PROC_TID_ATTR,       "attr",    S_IFDIR|S_IRUGO|S_IXUGO),
 #endif
+#ifdef CONFIG_DELAY_ACCT
+	E(PROC_TGID_DELAY_ACCT,"delay",   S_IFREG|S_IRUGO),
+#endif
 #ifdef CONFIG_KALLSYMS
 	E(PROC_TID_WCHAN,      "wchan",   S_IFREG|S_IRUGO),
 #endif
@@ -211,6 +221,7 @@ int proc_pid_statm(struct task_struct*,c
 #ifdef CONFIG_SCHED_STATS
 int proc_pid_cpu(struct task_struct*,char*);
 #endif
+int proc_pid_delay(struct task_struct*,char*);
 
 static int proc_fd_link(struct inode *inode, struct dentry **dentry, struct vfsmount **mnt)
 {
@@ -1543,6 +1554,13 @@ static struct dentry *proc_pident_lookup
 			ei->op.proc_read = proc_pid_cpu;
 			break;
 #endif
+#ifdef CONFIG_DELAY_ACCT
+		case PROC_TID_DELAY_ACCT:
+		case PROC_TGID_DELAY_ACCT:
+			inode->i_fop = &proc_info_file_operations;
+			ei->op.proc_read = proc_pid_delay;
+			break;
+#endif
 		default:
 			printk("procfs: impossible type (%d)",p->type);
 			iput(inode);
diff -puN include/linux/sched.h~delayacctg-E13 include/linux/sched.h
--- linux-2.6.7-rc3-xx1/include/linux/sched.h~delayacctg-E13	2004-06-10 20:10:12.608920528 -0400
+++ linux-2.6.7-rc3-xx1-xiphux/include/linux/sched.h	2004-06-10 20:10:12.643915208 -0400
@@ -148,6 +148,7 @@ struct sched_param {
 
 #ifdef __KERNEL__
 
+#include <linux/taskdelays.h>
 #include <linux/spinlock.h>
 
 /*
@@ -636,6 +637,7 @@ struct task_struct {
 #ifdef CONFIG_SYSTRACE
 	void *systrace;
 #endif
+ 	struct task_delay_info  delays;
 };
 
 static inline pid_t process_group(struct task_struct *tsk)
@@ -750,6 +752,9 @@ do { if (atomic_dec_and_test(&(tsk)->usa
 #define EBS_FLAGS_DEFAULT 0
 #endif
 
+#define PF_MEMIO   	0x00400000      /* I am  potentially doing I/O for mem */
+#define PF_IOWAIT       0x00800000      /* I am waiting on disk I/O */
+
 #ifdef CONFIG_SMP
 #define SCHED_LOAD_SCALE	128UL	/* increase resolution of load */
 
@@ -1378,6 +1383,60 @@ void init_cpu_half_life_file(void);
 #endif
 #endif
 
+
+/* API for registering delay info */
+#ifdef CONFIG_DELAY_ACCT
+
+#define test_delay_flag(tsk,flg)                ((tsk)->flags & (flg))
+#define set_delay_flag(tsk,flg)                 ((tsk)->flags |= (flg))
+#define clear_delay_flag(tsk,flg)               ((tsk)->flags &= ~(flg))
+
+#define def_delay_var(var)		        unsigned long long var
+#define get_delay(tsk,field)                    ((tsk)->delays.field)
+#define delay_value(x)				(((unsigned long)(x))/1000)
+
+#define start_delay(var)                        ((var) = sched_clock())
+#define start_delay_set(var,flg)                (set_delay_flag(current,flg),(var) = sched_clock())
+
+#define inc_delay(tsk,field) (((tsk)->delays.field)++)
+#define add_delay_ts(tsk,field,start_ts,end_ts) ((tsk)->delays.field += delay_value((end_ts)-(start_ts)))
+#define add_delay_clear(tsk,field,start_ts,flg) (add_delay_ts(tsk,field,start_ts,sched_clock()),clear_delay_flag(tsk,flg))
+
+static inline void add_io_delay(unsigned long dstart)
+{
+	struct task_struct * tsk = current;
+	unsigned long val = delay_value(sched_clock()-dstart);
+	if (test_delay_flag(tsk,PF_MEMIO)) {
+		tsk->delays.mem_iowait_total += val;
+		tsk->delays.num_memwaits++;
+	} else {
+		tsk->delays.iowait_total += val;
+		tsk->delays.num_iowaits++;
+	}
+	clear_delay_flag(tsk,PF_IOWAIT);
+}
+
+
+#else
+
+#define test_delay_flag(tsk,flg)                (0)
+#define set_delay_flag(tsk,flg)                 do { } while (0)
+#define clear_delay_flag(tsk,flg)               do { } while (0)
+
+#define def_delay_var(var)
+#define get_delay(tsk,field)                    (0)
+
+#define start_delay(var)                        do { } while (0)
+#define start_delay_set(var,flg)                do { } while (0)
+
+#define inc_delay(tsk,field)                    do { } while (0)
+#define add_delay_ts(tsk,field,start_ts,now)    do { } while (0)
+#define add_delay_clear(tsk,field,start_ts,flg) do { } while (0)
+#define add_io_delay(dstart)			do { } while (0)
+#endif
+
+
+
 #endif /* __KERNEL__ */
 
 #endif
diff -puN /dev/null include/linux/taskdelays.h
--- /dev/null	2004-05-31 17:36:38.000000000 -0400
+++ linux-2.6.7-rc3-xx1-xiphux/include/linux/taskdelays.h	2004-06-10 20:10:12.644915056 -0400
@@ -0,0 +1,20 @@
+#ifndef _LINUX_TASKDELAYS_H
+#define _LINUX_TASKDELAYS_H
+
+#include <linux/config.h>
+
+struct task_delay_info {
+#ifdef CONFIG_DELAY_ACCT
+        /* delay statistics in usecs */
+	unsigned long runs;
+	unsigned long waitcpu_total;
+	unsigned long runcpu_total;
+	unsigned long iowait_total;
+	unsigned long mem_iowait_total;
+	unsigned long num_iowaits;
+	unsigned long num_memwaits;
+#endif
+};
+
+#endif // _LINUX_TASKDELAYS_H
+
diff -puN init/Kconfig~delayacctg-E13 init/Kconfig
--- linux-2.6.7-rc3-xx1/init/Kconfig~delayacctg-E13	2004-06-10 20:10:12.611920072 -0400
+++ linux-2.6.7-rc3-xx1-xiphux/init/Kconfig	2004-06-10 20:10:12.646914752 -0400
@@ -263,6 +263,15 @@ menuconfig EMBEDDED
           environments which can tolerate a "non-standard" kernel.
           Only use this if you really know what you are doing.
 
+config DELAY_ACCT
+	bool "Enable delay accounting (EXPERIMENTAL)"
+	help
+	  In addition to counting frequency the total delay in ns is also
+	  recorded. CPU delays are specified as cpu-wait and cpu-run. Memory
+	  delay is recorded for minor and major faults. Information is
+	  accessible through /proc/<pid>/delay.
+
+
 config KALLSYMS
 	 bool "Load all symbols for debugging/kksymoops" if EMBEDDED
 	 default y
diff -puN kernel/sched.c~delayacctg-E13 kernel/sched.c
--- linux-2.6.7-rc3-xx1/kernel/sched.c~delayacctg-E13	2004-06-10 20:10:12.617919160 -0400
+++ linux-2.6.7-rc3-xx1-xiphux/kernel/sched.c	2004-06-10 20:11:25.898778776 -0400
@@ -4298,7 +4298,9 @@ switch_tasks:
 	prefetch(next);
 	clear_tsk_need_resched(prev);
 	RCU_qsctr(task_cpu(prev))++;
-
+#ifdef CONFIG_NICKSCHED
+	add_delay_ts(prev,runcpu_total,prev->timestamp,now);
+#endif
 #if !defined(CONFIG_NICKSCHED) && !defined(CONFIG_EBS)
 #ifndef CONFIG_SPA_STAIRCASE
 	prev->sleep_avg -= run_time;
@@ -4308,10 +4310,13 @@ switch_tasks:
 			prev->interactive_credit--;
 	}
 #endif
+ 	add_delay_ts(prev,runcpu_total,prev->timestamp,now);
 	prev->timestamp = now;
 #endif
 
 	if (likely(prev != next)) {
+  		add_delay_ts(next,waitcpu_total,next->timestamp,now);
+  		inc_delay(next,runs);
 #ifdef CONFIG_NICKSCHED
 		add_task_time(next, now - next->timestamp, STIME_WAIT);
 #endif
@@ -5523,10 +5528,13 @@ EXPORT_SYMBOL(yield);
 void __sched io_schedule(void)
 {
 	struct runqueue *rq = this_rq();
+	def_delay_var(dstart);
 
+	start_delay_set(dstart,PF_IOWAIT);
 	atomic_inc(&rq->nr_iowait);
 	schedule();
 	atomic_dec(&rq->nr_iowait);
+	add_io_delay(dstart);
 }
 
 EXPORT_SYMBOL(io_schedule);
@@ -5535,10 +5543,13 @@ long __sched io_schedule_timeout(long ti
 {
 	struct runqueue *rq = this_rq();
 	long ret;
+	def_delay_var(dstart);
 
+	start_delay_set(dstart,PF_IOWAIT);
 	atomic_inc(&rq->nr_iowait);
 	ret = schedule_timeout(timeout);
 	atomic_dec(&rq->nr_iowait);
+	add_io_delay(dstart);
 	return ret;
 }
 
@@ -6814,6 +6825,14 @@ int cpustats_read_proc(char *page, char 
 }
 #endif
 
+#ifdef CONFIG_DELAY_ACCT
+int task_running_sys(struct task_struct *p)
+{
+       return task_running(task_rq(p),p);
+}
+EXPORT_SYMBOL(task_running_sys);
+#endif
+
 #ifdef	CONFIG_KDB
 task_t *kdb_cpu_curr(int cpu)
 {
diff -puN mm/memory.c~delayacctg-E13 mm/memory.c
--- linux-2.6.7-rc3-xx1/mm/memory.c~delayacctg-E13	2004-06-10 20:10:12.620918704 -0400
+++ linux-2.6.7-rc3-xx1-xiphux/mm/memory.c	2004-06-10 20:10:12.707905480 -0400
@@ -1699,15 +1699,20 @@ int handle_mm_fault(struct mm_struct *mm
 	 * We need the page table lock to synchronize with kswapd
 	 * and the SMP-safe atomic PTE updates.
 	 */
+	set_delay_flag(current,PF_MEMIO);
 	spin_lock(&mm->page_table_lock);
 	pmd = pmd_alloc(mm, pgd, address);
 
 	if (pmd) {
 		pte_t * pte = pte_alloc_map(mm, pmd, address);
-		if (pte)
-			return handle_pte_fault(mm, vma, address, write_access, pte, pmd);
+		if (pte) {
+			int result = handle_pte_fault(mm, vma, address, write_access, pte, pmd);
+			clear_delay_flag(current,PF_MEMIO);
+			return result;
+		}
 	}
 	spin_unlock(&mm->page_table_lock);
+	clear_delay_flag(current,PF_MEMIO);
 	return VM_FAULT_OOM;
 }
 

_
