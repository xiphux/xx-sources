
Runtime selectable I/O schedulers init code cleanup, by Nick Piggin.


---

 linux-2.6.5-xx21-xiphux/drivers/block/elevator.c  |  100 ++++++++++++++++++++--
 linux-2.6.5-xx21-xiphux/drivers/block/ll_rw_blk.c |   79 +++++------------
 linux-2.6.5-xx21-xiphux/include/linux/elevator.h  |    9 +
 3 files changed, 123 insertions(+), 65 deletions(-)

diff -puN drivers/block/elevator.c~elv-init-cleanup-xx drivers/block/elevator.c
--- linux-2.6.5-xx21/drivers/block/elevator.c~elv-init-cleanup-xx	2004-05-07 15:27:30.589251648 -0400
+++ linux-2.6.5-xx21-xiphux/drivers/block/elevator.c	2004-05-07 15:27:30.596250584 -0400
@@ -37,6 +37,14 @@
 
 #include <asm/uaccess.h>
 
+#ifdef CONFIG_ELV_SELECT
+/* These may not exist - must check CONFIG_IOSCHED_* */
+extern elevator_t elevator_noop;
+extern elevator_t iosched_deadline;
+extern elevator_t iosched_as;
+extern elevator_t iosched_cfq;
+#endif
+
 /*
  * can we safely merge with this request?
  */
@@ -86,6 +94,51 @@ inline int elv_try_last_merge(request_qu
 	return ELEVATOR_NO_MERGE;
 }
 
+#ifdef CONFIG_ELV_SELECT
+static elevator_t *default_elevator =
+#if defined(CONFIG_IOSCHED_AS)
+	&iosched_as;
+#elif defined(CONFIG_IOSCHED_DEADLINE)
+	&iosched_deadline;
+#elif defined(CONFIG_IOSCHED_CFQ)
+	&iosched_cfq;
+#elif defined(CONFIG_IOSCHED_NOOP)
+	&elevator_noop;
+#else
+	NULL;
+#error "You must have at least 1 I/O scheduler selected"
+#endif
+
+static elevator_t *str_to_elv(const char *str)
+{
+	if (!strncmp(str, "default", strlen("default")))
+		return default_elevator;
+
+#ifdef CONFIG_IOSCHED_DEADLINE
+	if (!strncmp(str, iosched_deadline.elevator_name,
+				strlen(iosched_deadline.elevator_name)))
+		return &iosched_deadline;
+#endif
+#ifdef CONFIG_IOSCHED_AS
+	if (!strncmp(str, iosched_as.elevator_name,
+				strlen(iosched_as.elevator_name)))
+		return &iosched_as;
+#endif
+#ifdef CONFIG_IOSCHED_CFQ
+	if (!strncmp(str, iosched_cfq.elevator_name,
+				strlen(iosched_cfq.elevator_name)))
+		return &iosched_cfq;
+#endif
+#ifdef CONFIG_IOSCHED_NOOP
+	if (!strncmp(str, elevator_noop.elevator_name,
+				strlen(elevator_noop.elevator_name)))
+		return &elevator_noop;
+#endif
+
+	return NULL;
+}
+#endif
+
 /*
  * general block -> elevator interface starts here
  */
@@ -131,14 +184,22 @@ void elevator_exit(request_queue_t *q)
 }
 
 #ifdef CONFIG_ELV_SELECT
-elevator_t *elevator_alloc(elevator_t *type)
+elevator_t *elevator_alloc(const char *type)
 {
-	elevator_t *e = kmalloc(sizeof(*type), GFP_KERNEL);
+	elevator_t *e, *elv_type;
+
+	elv_type = str_to_elv(type);
+	if (elv_type == NULL) {
+		printk(KERN_INFO "Unknown elevator %s. Using default\n", type);
+		elv_type = default_elevator;
+	}
+
+	e = kmalloc(sizeof(*elv_type), GFP_KERNEL);
 
 	if (e == NULL)
 		goto out_err;
 
-	memcpy(e, type, sizeof(*e));
+	memcpy(e, elv_type, sizeof(*e));
 
 	if (e->elevator_alloc_fn)
 		if (e->elevator_alloc_fn(e))
@@ -455,13 +516,15 @@ static struct kobj_type default_ktype = 
 };
 #endif
 
+#ifdef CONFIG_ELV_SELECT
+int elv_register_queue(struct request_queue *q, elevator_t *e)
+#else
 int elv_register_queue(struct request_queue *q)
+#endif
 {
+#ifndef CONFIG_ELV_SELECT
 	elevator_t *e;
 
-#ifdef CONFIG_ELV_SELECT
-	e = q->elevator;
-#else
 	e = &q->elevator;
 #endif
 
@@ -483,19 +546,38 @@ int elv_register_queue(struct request_qu
 	return kobject_register(&e->kobj);
 }
 
+#ifdef CONFIG_ELV_SELECT
+void elv_unregister_queue(struct request_queue *q, elevator_t *e)
+#else
 void elv_unregister_queue(struct request_queue *q)
+#endif
 {
-	if (q) {
 #ifdef CONFIG_ELV_SELECT
-		elevator_t *e = q->elevator;
+	kobject_unregister(&e->kobj);
+	kobject_put(&q->kobj);
+}
+
+/* boot-time set default */
+static int __init elevator_setup(char *str)
+{
+	elevator_t *e = str_to_elv(str);
+	if (e != NULL)
+		default_elevator = e;
+
+	return 1;
 #else
+	if (q) {
 		elevator_t * e = &q->elevator;
-#endif
 		kobject_unregister(&e->kobj);
 		kobject_put(&q->kobj);
 	}
+#endif
 }
 
+#ifdef CONFIG_ELV_SELECT
+__setup("elevator=", elevator_setup);
+#endif
+
 module_init(elevator_global_init);
 
 EXPORT_SYMBOL(elv_add_request);
diff -puN drivers/block/ll_rw_blk.c~elv-init-cleanup-xx drivers/block/ll_rw_blk.c
--- linux-2.6.5-xx21/drivers/block/ll_rw_blk.c~elv-init-cleanup-xx	2004-05-07 15:27:30.591251344 -0400
+++ linux-2.6.5-xx21-xiphux/drivers/block/ll_rw_blk.c	2004-05-07 15:27:30.598250280 -0400
@@ -1396,6 +1396,7 @@ static int blk_init_free_list(request_qu
 
 static int __make_request(request_queue_t *, struct bio *);
 
+#ifndef CONFIG_ELV_SELECT
 static elevator_t *chosen_elevator =
 #if defined(CONFIG_IOSCHED_CFQ)
 	&iosched_cfq;
@@ -1410,40 +1411,6 @@ static elevator_t *chosen_elevator =
 #error "You must have at least 1 I/O scheduler selected"
 #endif
 
-#ifdef CONFIG_ELV_SELECT
-elevator_t *str_to_elv(const char *str)
-{
-#ifdef CONFIG_IOSCHED_DEADLINE
-	if (!strncmp(str, "deadline", strlen("deadline")))
-		return &iosched_deadline;
-#endif
-#ifdef CONFIG_IOSCHED_AS
-	if (!strncmp(str, "as", strlen("as")))
-		return &iosched_as;
-#endif
-#ifdef CONFIG_IOSCHED_CFQ
-	if (!strncmp(str, "cfq", strlen("cfq")))
-		return &iosched_cfq;
-#endif
-#ifdef CONFIG_IOSCHED_NOOP
-	if (!strncmp(str, "noop", strlen("noop")))
-		return &elevator_noop;
-#endif
-
-	return NULL;
-}
-
-static int __init elevator_setup(char *str)
-{
-	elevator_t *e = str_to_elv(str);
-	if (e != NULL)
-		chosen_elevator = e;
-
-	return 1;
-}
-
-__setup("elevator=", elevator_setup);
-#else
 #if defined(CONFIG_IOSCHED_AS) || defined(CONFIG_IOSCHED_DEADLINE) || defined (CONFIG_IOSCHED_NOOP)
 static int __init elevator_setup(char *str)
  {
@@ -1533,7 +1500,7 @@ request_queue_t *blk_init_queue(request_
 		goto out_init;
 
 #ifdef CONFIG_ELV_SELECT
-	e = elevator_alloc(chosen_elevator);
+	e = elevator_alloc("default");
 	if (!e)
 #else
 	if (!printed) {
@@ -3111,27 +3078,27 @@ queue_var_store(unsigned long *var, cons
 #ifdef CONFIG_ELV_SELECT
 static ssize_t queue_elevator_show(struct request_queue *q, char *page)
 {
-	return sprintf(page, "%s\n", q->elevator->elevator_name);
+	int ret;
+	unsigned long flags;
+	spin_lock_irqsave(q->queue_lock, flags);
+	ret = sprintf(page, "%s\n", q->elevator->elevator_name);
+	spin_unlock_irqrestore(q->queue_lock, flags);
+
+	return ret;
 }
 
 static ssize_t
 queue_elevator_store(struct request_queue *q, const char *page, size_t count)
 {
-	elevator_t *type, *elv;
+	elevator_t *e, *old_elv;
 	unsigned long flags;
 	static DECLARE_MUTEX(switch_mutex);
 
 	down(&switch_mutex);
 
-	type = str_to_elv(page);
-	if (type == NULL) {
-		goto out;
-	}
-
-	elv = elevator_alloc(type);
-	if (!elv) {
+	e = elevator_alloc(page);
+	if (!e)
 		goto out;
-	}
 
 	spin_lock_irqsave(q->queue_lock, flags);
 
@@ -3139,21 +3106,21 @@ queue_elevator_store(struct request_queu
 	blk_set_queue_drain(q);
 	blk_wait_free_list(q);
 
+	WARN_ON(!elv_queue_empty(q));
+
 	/* Stop old elevator */
+	old_elv = q->elevator;
 	elevator_exit(q);
 
-	/* Unlock here should be OK. The elevator should not be entered because
-	 * the queue is drained, and blocked... */
-	spin_unlock_irqrestore(q->queue_lock, flags);
-	elv_unregister_queue(q);
-	spin_lock_irqsave(q->queue_lock, flags);
-
 	/* Start new one */
-	elevator_init(q, elv);
+	elevator_init(q, e);
 	printk(KERN_INFO "elevator_init %s\n", q->elevator->elevator_name);
 
+	/* Unlock here should be OK. The elevator should not be entered because
+	 * the queue is drained, and blocked... */
 	spin_unlock_irqrestore(q->queue_lock, flags);
-	if (elv_register_queue(q)) {
+	elv_unregister_queue(q, old_elv);
+	if (elv_register_queue(q, e)) {
 		/*
 		 * Can't do much about it now... failure should not cause the
 		 * device to stop working or future elevator selection to stop
@@ -3303,7 +3270,7 @@ int blk_register_queue(struct gendisk *d
 
 #ifdef CONFIG_ELV_SELECT
 	if (q->elevator) {
-		ret = elv_register_queue(q);
+		ret = elv_register_queue(q, q->elevator);
 		if (ret) {
 			kobject_unregister(&q->kobj);
 			return ret;
@@ -3326,8 +3293,10 @@ void blk_unregister_queue(struct gendisk
 	if (q && q->request_fn) {
 #ifdef CONFIG_ELV_SELECT
 		if (q->elevator)
+			elv_unregister_queue(q, q->elevator);
+#else
+		elv_unregister_queue(q);
 #endif
-			elv_unregister_queue(q);
 
 		kobject_unregister(&q->kobj);
 		kobject_put(&disk->kobj);
diff -puN include/linux/elevator.h~elv-init-cleanup-xx include/linux/elevator.h
--- linux-2.6.5-xx21/include/linux/elevator.h~elv-init-cleanup-xx	2004-05-07 15:27:30.593251040 -0400
+++ linux-2.6.5-xx21-xiphux/include/linux/elevator.h	2004-05-07 15:27:30.599250128 -0400
@@ -89,8 +89,13 @@ extern int elv_queue_empty(request_queue
 extern struct request *elv_next_request(struct request_queue *q);
 extern struct request *elv_former_request(request_queue_t *, struct request *);
 extern struct request *elv_latter_request(request_queue_t *, struct request *);
+#ifdef CONFIG_ELV_SELECT
+extern int elv_register_queue(request_queue_t *q, elevator_t *e);
+extern void elv_unregister_queue(request_queue_t *q, elevator_t *e);
+#else
 extern int elv_register_queue(request_queue_t *q);
 extern void elv_unregister_queue(request_queue_t *q);
+#endif
 extern int elv_may_queue(request_queue_t *, int);
 #ifdef CONFIG_CFQIONICE
 extern void elv_set_congested(request_queue_t *);
@@ -99,6 +104,7 @@ extern void elv_completed_request(reques
 extern int elv_set_request(request_queue_t *, struct request *, int);
 extern void elv_put_request(request_queue_t *, struct request *);
 
+#ifndef CONFIG_ELV_SELECT
 /*
  * noop I/O scheduler. always merges, always inserts new request at tail
  */
@@ -119,6 +125,7 @@ extern elevator_t iosched_as;
  * completely fair queueing I/O scheduler
  */
 extern elevator_t iosched_cfq;
+#endif
 
 #ifdef CONFIG_ELV_SELECT
 extern void elevator_init(request_queue_t *, elevator_t *);
@@ -127,7 +134,7 @@ extern int elevator_init(request_queue_t
 #endif
 extern void elevator_exit(request_queue_t *);
 #ifdef CONFIG_ELV_SELECT
-extern elevator_t *elevator_alloc(elevator_t *);
+extern elevator_t *elevator_alloc(const char *);
 extern void elevator_release(struct kobject *);
 #endif
 extern int elv_rq_merge_ok(struct request *, struct bio *);

_
