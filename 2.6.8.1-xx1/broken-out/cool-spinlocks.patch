 arch/i386/Kconfig           |   10 ++++++++++
 arch/i386/lib/Makefile      |    1 +
 arch/i386/lib/spinlock.c    |   38 ++++++++++++++++++++++++++++++++++++++
 include/asm-i386/spinlock.h |   22 ++++++++++++++++++++--
 4 files changed, 69 insertions(+), 2 deletions(-)
Index: linux-2.6.8-rc3-mm1/arch/i386/Kconfig===================================================================
RCS file: /home/cvsroot/linux-2.6.8-rc3-mm1/arch/i386/Kconfig,v
retrieving revision 1.1.1.1
Index: linux-2.6.7/arch/i386/Kconfig
===================================================================
--- linux-2.6.7.orig/arch/i386/Kconfig	2004-08-11 01:45:14.000000000 -0400
+++ linux-2.6.7/arch/i386/Kconfig	2004-08-11 01:45:15.000000000 -0400
@@ -1279,6 +1279,16 @@
 	  best used in conjunction with the NMI watchdog so that spinlock
 	  deadlocks are also debuggable.
 
+config COOL_SPINLOCK
+	bool "Completely out of line spinlocks"
+	depends on SMP
+	default y
+	help
+          Say Y here to build spinlocks which have common text for contended
+          and uncontended paths. This reduces kernel text size by at least
+          50k on most configurations, plus there is the additional benefit
+          of better cache utilisation.
+
 config DEBUG_PAGEALLOC
 	bool "Page alloc debugging"
 	depends on DEBUG_KERNEL
Index: linux-2.6.7/arch/i386/lib/Makefile
===================================================================
--- linux-2.6.7.orig/arch/i386/lib/Makefile	2004-08-11 01:43:44.000000000 -0400
+++ linux-2.6.7/arch/i386/lib/Makefile	2004-08-11 01:45:15.000000000 -0400
@@ -6,6 +6,7 @@
 lib-y = checksum.o delay.o usercopy.o getuser.o memcpy.o strstr.o \
 	bitops.o
 
+lib-$(CONFIG_COOL_SPINLOCK) += spinlock.o
 lib-$(CONFIG_X86_USE_3DNOW) += mmx.o
 lib-$(CONFIG_HAVE_DEC_LOCK) += dec_and_lock.o
 lib-$(CONFIG_KGDB) += kgdb_serial.o
Index: linux-2.6.7/arch/i386/lib/spinlock.c
===================================================================
--- linux-2.6.7.orig/arch/i386/lib/spinlock.c	2004-05-31 17:36:38.000000000 -0400
+++ linux-2.6.7/arch/i386/lib/spinlock.c	2004-08-11 01:45:15.000000000 -0400
@@ -0,0 +1,38 @@
+#include <linux/module.h>
+
+#define PROC(name)	\
+	".align 4\n" \
+	".globl " #name"\n" \
+	#name":\n"
+
+asm (PROC(__spin_lock_loop_flags)
+	"lock; decb (%eax)\n\t"
+	"js 1f\n\t"
+	"nop\n\t"
+	"ret\n\t"
+	"1:\n\t"
+	"testl $0x200, %edx\n\t"
+	"jz 1f\n\t"
+	"sti\n\t"
+	"2: rep; nop\n\t"
+	"cmpb $0, (%eax)\n\t"
+	"jle 2b\n\t"
+	"cli\n\t"
+	"jmp __spin_lock_loop_flags\n\t"
+);
+
+asm (PROC(__spin_lock_loop)
+	"lock; decb (%eax)\n\t"
+	"js 1f\n\t"
+	"nop\n\t"
+	"ret\n\t"
+	"1: rep; nop\n\t"
+	"cmpb $0, (%eax)\n\t"
+	"jle 1b\n\t"
+	"jmp __spin_lock_loop\n\t"
+);
+
+void __spin_lock_loop_flags(void);
+void __spin_lock_loop(void);
+EXPORT_SYMBOL(__spin_lock_loop_flags);
+EXPORT_SYMBOL(__spin_lock_loop);
Index: linux-2.6.7/include/asm-i386/spinlock.h
===================================================================
--- linux-2.6.7.orig/include/asm-i386/spinlock.h	2004-08-11 01:43:45.000000000 -0400
+++ linux-2.6.7/include/asm-i386/spinlock.h	2004-08-11 01:45:15.000000000 -0400
@@ -43,6 +43,13 @@
 #define spin_is_locked(x)	(*(volatile signed char *)(&(x)->lock) <= 0)
 #define spin_unlock_wait(x)	do { barrier(); } while(spin_is_locked(x))
 
+#ifdef CONFIG_COOL_SPINLOCK
+	#define spin_lock_string \
+		"call __spin_lock_loop\n\t"
+
+	#define spin_lock_string_flags \
+		"call __spin_lock_loop_flags\n\t"
+#else
 #define spin_lock_string \
 	"\n1:\t" \
 	"lock ; decb %0\n\t" \
@@ -71,6 +78,7 @@
 	"cli\n\t" \
 	"jmp 1b\n" \
 	LOCK_SECTION_END
+#endif
 
 /*
  * This works. Despite all the confusion.
@@ -139,7 +147,12 @@
 #endif
 	__asm__ __volatile__(
 		spin_lock_string
-		:"=m" (lock->lock) : : "memory");
+#ifdef CONFIG_COOL_SPINLOCK
+		: : "a" (&lock->lock) : "memory"
+#else
+		:"=m" (lock->lock) : : "memory"
+#endif
+	);
 }
 
 static inline void _raw_spin_lock_flags (spinlock_t *lock, unsigned long flags)
@@ -154,7 +167,12 @@
 #endif
 	__asm__ __volatile__(
 		spin_lock_string_flags
-		:"=m" (lock->lock) : "r" (flags) : "memory");
+#ifdef CONFIG_COOL_SPINLOCK
+		: : "a" (&lock->lock), "d" (flags) : "memory"
+#else
+		:"=m" (lock->lock) : "r" (flags) : "memory"
+#endif
+	);
 }
 
 /*
