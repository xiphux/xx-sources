
From: Arnd Bergmann <arnd@arndb.de>

I find it somewhat annoying that the preprocessor expands every "inline" to
"__inline__ __attribute__((always_inline)) __attribute__((always_inline)=
)" in the current code.

Fix that up.

Signed-off-by: Andrew Morton <akpm@osdl.org>
---

 25-akpm/include/linux/compiler-gcc+.h |    6 +++---
 25-akpm/include/linux/compiler-gcc3.h |   10 +++-------
 2 files changed, 6 insertions(+), 10 deletions(-)

diff -puN include/linux/compiler-gcc3.h~gcc-34-and-broken-inlining include/linux/compiler-gcc3.h
--- 25/include/linux/compiler-gcc3.h~gcc-34-and-broken-inlining	2004-07-11 21:57:35.853456000 -0700
+++ 25-akpm/include/linux/compiler-gcc3.h	2004-07-11 21:57:35.858455240 -0700
@@ -4,13 +4,9 @@
 #include <linux/compiler-gcc.h>
 
 #if __GNUC_MINOR__ >= 1
-# define inline		__inline__ __attribute__((always_inline))
-# define __inline__	__inline__ __attribute__((always_inline))
-# define __inline	__inline__ __attribute__((always_inline))
-#endif
-
-#if __GNUC_MINOR__ >= 1
-# define __always_inline inline __attribute__((always_inline))
+# define inline		inline		__attribute__((always_inline))
+# define __inline__	__inline__	__attribute__((always_inline))
+# define __inline	__inline	__attribute__((always_inline))
 #endif
 
 #if __GNUC_MINOR__ > 0
diff -puN include/linux/compiler-gcc+.h~gcc-34-and-broken-inlining include/linux/compiler-gcc+.h
--- 25/include/linux/compiler-gcc+.h~gcc-34-and-broken-inlining	2004-07-11 21:57:35.854455848 -0700
+++ 25-akpm/include/linux/compiler-gcc+.h	2004-07-11 21:57:35.858455240 -0700
@@ -6,9 +6,9 @@
  */
 #include <linux/compiler-gcc.h>
 
-#define inline			__inline__ __attribute__((always_inline))
-#define __inline__		__inline__ __attribute__((always_inline))
-#define __inline		__inline__ __attribute__((always_inline))
+#define inline			inline		__attribute__((always_inline))
+#define __inline__		__inline__	__attribute__((always_inline))
+#define __inline		__inline	__attribute__((always_inline))
 #define __deprecated		__attribute__((deprecated))
 #define __attribute_used__	__attribute__((__used__))
 #define __attribute_pure__	__attribute__((pure))
_
