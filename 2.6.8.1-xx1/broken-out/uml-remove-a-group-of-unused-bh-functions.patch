
From: Coywolf Qi Hunt <coywolf@greatcn.org>

This patch removes a group of unused bh functions in um.  This 2.2 legacy
code should be cleaned up.

Signed-off-by: Coywolf Qi Hunt <coywolf@greatcn.org>
Signed-off-by: Andrew Morton <akpm@osdl.org>
---

 25-akpm/arch/um/kernel/smp.c |   43 -------------------------------------------
 1 files changed, 43 deletions(-)

diff -puN arch/um/kernel/smp.c~uml-remove-a-group-of-unused-bh-functions arch/um/kernel/smp.c
--- 25/arch/um/kernel/smp.c~uml-remove-a-group-of-unused-bh-functions	Thu Jul 29 14:52:36 2004
+++ 25-akpm/arch/um/kernel/smp.c	Thu Jul 29 14:52:36 2004
@@ -39,14 +39,6 @@ EXPORT_SYMBOL(cpu_online_map);
  */
 struct cpuinfo_um cpu_data[NR_CPUS];
 
-spinlock_t um_bh_lock = SPIN_LOCK_UNLOCKED;
-
-atomic_t global_bh_count;
-
-/* Not used by UML */
-unsigned char global_irq_holder = NO_PROC_ID;
-unsigned volatile long global_irq_lock;
-
 /* Set when the idlers are all forked */
 int smp_threads_ready = 0;
 
@@ -65,41 +57,6 @@ void smp_send_reschedule(int cpu)
 	num_reschedules_sent++;
 }
 
-static void show(char * str)
-{
-	int cpu = smp_processor_id();
-
-	printk(KERN_INFO "\n%s, CPU %d:\n", str, cpu);
-}
-	
-#define MAXCOUNT 100000000
-
-static inline void wait_on_bh(void)
-{
-	int count = MAXCOUNT;
-	do {
-		if (!--count) {
-			show("wait_on_bh");
-			count = ~0;
-		}
-		/* nothing .. wait for the other bh's to go away */
-	} while (atomic_read(&global_bh_count) != 0);
-}
-
-/*
- * This is called when we want to synchronize with
- * bottom half handlers. We need to wait until
- * no other CPU is executing any bottom half handler.
- *
- * Don't wait if we're already running in an interrupt
- * context or are inside a bh handler. 
- */
-void synchronize_bh(void)
-{
-	if (atomic_read(&global_bh_count) && !in_interrupt())
-		wait_on_bh();
-}
-
 void smp_send_stop(void)
 {
 	int i;
_
