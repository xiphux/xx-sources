diff -Naur linux-2.6.7-rc2/Changelog linux-2.6.7-rc2-ff1/Changelog
--- linux-2.6.7-rc2/Changelog	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.6.7-rc2-ff1/Changelog	2004-06-01 19:07:41.000000000 +0200
@@ -0,0 +1,11 @@
+2.6.7-rc2-ff1
+
+	-mconf.h for mconf.c/wconf.c common doc. plateform (FabF)
+	-Adding early kconfig cgi browser version (FabF)
+	-'make webconfig' : build but don't try to run binary (FabF)
+	-Washing mconf code (switches were all 'bad-tab') (FabF)
+	-Documentation/webconfig:Intro, httpd directives (FabF)
+	-Querystring washing (FabF)
+	-Moving webconfig to div site compliant (FabF)
+	-Recursive method for menu seed (FabF)
+
diff -Naur linux-2.6.7-rc2/Documentation/webconfig.txt linux-2.6.7-rc2-ff1/Documentation/webconfig.txt
--- linux-2.6.7-rc2/Documentation/webconfig.txt	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.6.7-rc2-ff1/Documentation/webconfig.txt	2004-05-31 14:19:02.000000000 +0200
@@ -0,0 +1,41 @@
+webconfig - Kernel Configuration for your favourite web server
+
+Fabian Frederick <fabian.frederick@gmx.fr>
+
+Initial release : 05/2004
+Update          : --
+
+Copyright (c) 2004 Fabian Frederick
+Based on menuconfig by Roman Zippel
+
+0.introduction
+
+Linux kernel brings several configuration tools e.g.:
+	-curses menuconfig
+	-qt qconf
+
+Here's the next generation layout : web cgi.
+wconf works exactly the same other config tools do
+with some adaptations though.
+
+1.Build the cgi
+
+1.1. make webconfig
+It generates wconf from scripts/kconfig/wconf and moves
+it to the linux tree root.
+
+
+1.cgi activation
+
+Here's an Apache .conf entry for cgi access
+ScriptAlias /cgi-bin/ "/usr/src/linux-2.6.7-rc2-ff1/"
+
+<Directory "/usr/src/linux-2.6.7-rc2-ff1/">
+    AllowOverride None
+    Options None
+    Order allow,deny
+    Allow from all
+</Directory>
+
+chmod 755 kerneltree
+
diff -Naur linux-2.6.7-rc2/scripts/kconfig/conf.c linux-2.6.7-rc2-ff1/scripts/kconfig/conf.c
--- linux-2.6.7-rc2/scripts/kconfig/conf.c	2004-05-10 04:33:19.000000000 +0200
+++ linux-2.6.7-rc2-ff1/scripts/kconfig/conf.c	2004-05-31 15:47:55.000000000 +0200
@@ -82,78 +82,78 @@
 	}
 
 	switch (input_mode) {
-	case ask_new:
-	case ask_silent:
-		if (sym_has_value(sym)) {
+		case ask_new:
+		case ask_silent:
+			if (sym_has_value(sym)) {
+				printf("%s\n", def);
+				return;
+			}
+			check_stdin();
+		case ask_all:
+			fflush(stdout);
+			fgets(line, 128, stdin);
+			return;
+		case set_default:
 			printf("%s\n", def);
 			return;
-		}
-		check_stdin();
-	case ask_all:
-		fflush(stdout);
-		fgets(line, 128, stdin);
-		return;
-	case set_default:
-		printf("%s\n", def);
-		return;
-	default:
-		break;
+		default:
+			break;
 	}
 
 	switch (type) {
-	case S_INT:
-	case S_HEX:
-	case S_STRING:
-		printf("%s\n", def);
-		return;
-	default:
-		;
+		case S_INT:
+		case S_HEX:
+		case S_STRING:
+			printf("%s\n", def);
+			return;
+		default:
+			;
 	}
 	switch (input_mode) {
-	case set_yes:
-		if (sym_tristate_within_range(sym, yes)) {
-			line[0] = 'y';
-			line[1] = '\n';
-			line[2] = 0;
-			break;
-		}
-	case set_mod:
-		if (type == S_TRISTATE) {
-			if (sym_tristate_within_range(sym, mod)) {
-				line[0] = 'm';
+		case set_yes:
+			if (sym_tristate_within_range(sym, yes)) {
+				line[0] = 'y';
 				line[1] = '\n';
 				line[2] = 0;
 				break;
 			}
-		} else {
-			if (sym_tristate_within_range(sym, yes)) {
-				line[0] = 'y';
+		case set_mod:
+			if (type == S_TRISTATE) {
+				if (sym_tristate_within_range(sym, mod)) {
+					line[0] = 'm';
+					line[1] = '\n';
+						line[2] = 0;
+					break;
+				}
+			} else {
+				if (sym_tristate_within_range(sym, yes)) {
+					line[0] = 'y';
+					line[1] = '\n';
+					line[2] = 0;
+					break;
+				}
+			}
+		case set_no:
+			if (sym_tristate_within_range(sym, no)) {
+				line[0] = 'n';
 				line[1] = '\n';
 				line[2] = 0;
 				break;
 			}
-		}
-	case set_no:
-		if (sym_tristate_within_range(sym, no)) {
-			line[0] = 'n';
+		case set_random:
+			do {
+				val = (tristate)(random() % 3);
+			} while (!sym_tristate_within_range(sym, val));
+			switch (val) {
+				case no: line[0] = 'n'; break;
+				case mod: line[0] = 'm'; break;
+				case yes: line[0] = 'y'; break;
+			}
 			line[1] = '\n';
 			line[2] = 0;
 			break;
-		}
-	case set_random:
-		do {
-			val = (tristate)(random() % 3);
-		} while (!sym_tristate_within_range(sym, val));
-		switch (val) {
-		case no: line[0] = 'n'; break;
-		case mod: line[0] = 'm'; break;
-		case yes: line[0] = 'y'; break;
-		}
-		line[1] = '\n';
-		line[2] = 0;
-		break;
-	default:
-		break;
+		default:
+			break;
 	}
 	printf("%s", line);
 }
@@ -171,21 +171,21 @@
 			printf("[%s] ", def);
 		conf_askvalue(sym, def);
 		switch (line[0]) {
-		case '\n':
-			break;
-		case '?':
-			/* print help */
-			if (line[1] == '\n') {
-				help = nohelp_text;
-				if (menu->sym->help)
-					help = menu->sym->help;
-				printf("\n%s\n", menu->sym->help);
-				def = NULL;
+			case '\n':
 				break;
-			}
-		default:
-			line[strlen(line)-1] = 0;
-			def = line;
+			case '?':
+				/* print help */
+				if (line[1] == '\n') {
+					help = nohelp_text;
+					if (menu->sym->help)
+						help = menu->sym->help;
+					printf("\n%s\n", menu->sym->help);
+					def = NULL;
+					break;
+				}
+			default:
+				line[strlen(line)-1] = 0;
+				def = line;
 		}
 		if (def && sym_set_string_value(sym, def))
 			return 0;
@@ -207,15 +207,15 @@
 		putchar('[');
 		oldval = sym_get_tristate_value(sym);
 		switch (oldval) {
-		case no:
-			putchar('N');
-			break;
-		case mod:
-			putchar('M');
-			break;
-		case yes:
-			putchar('Y');
-			break;
+			case no:
+				putchar('N');
+				break;
+			case mod:
+				putchar('M');
+				break;
+			case yes:
+				putchar('Y');
+				break;
 		}
 		if (oldval != no && sym_tristate_within_range(sym, no))
 			printf("/n");
@@ -230,31 +230,31 @@
 		strip(line);
 
 		switch (line[0]) {
-		case 'n':
-		case 'N':
-			newval = no;
-			if (!line[1] || !strcmp(&line[1], "o"))
-				break;
-			continue;
-		case 'm':
-		case 'M':
-			newval = mod;
-			if (!line[1])
-				break;
-			continue;
-		case 'y':
-		case 'Y':
-			newval = yes;
-			if (!line[1] || !strcmp(&line[1], "es"))
+			case 'n':
+			case 'N':
+				newval = no;
+				if (!line[1] || !strcmp(&line[1], "o"))
+					break;
+				continue;
+			case 'm':
+			case 'M':
+				newval = mod;
+				if (!line[1])
+					break;
+				continue;
+			case 'y':
+			case 'Y':
+				newval = yes;
+				if (!line[1] || !strcmp(&line[1], "es"))
+					break;
+				continue;
+			case 0:
+				newval = oldval;
 				break;
-			continue;
-		case 0:
-			newval = oldval;
-			break;
-		case '?':
-			goto help;
-		default:
-			continue;
+			case '?':
+				goto help;
+			default:
+				continue;
 		}
 		if (sym_set_tristate_value(sym, newval))
 			return 0;
@@ -280,22 +280,22 @@
 		conf_sym(menu);
 		sym_calc_value(sym);
 		switch (sym_get_tristate_value(sym)) {
-		case no:
-			return 1;
-		case mod:
-			return 0;
-		case yes:
-			break;
+			case no:
+				return 1;
+			case mod:
+				return 0;
+			case yes:
+				break;
 		}
 	} else {
 		switch (sym_get_tristate_value(sym)) {
-		case no:
-			return 1;
-		case mod:
-			printf("%*s%s\n", indent - 1, "", menu_get_prompt(menu));
-			return 0;
-		case yes:
-			break;
+			case no:
+				return 1;
+			case mod:
+				printf("%*s%s\n", indent - 1, "", menu_get_prompt(menu));
+				return 0;
+			case yes:
+				break;
 		}
 	}
 
@@ -337,39 +337,39 @@
 			printf("?");
 		printf("]: ");
 		switch (input_mode) {
-		case ask_new:
-		case ask_silent:
-			if (!is_new) {
+			case ask_new:
+			case ask_silent:
+				if (!is_new) {
+					cnt = def;
+					printf("%d\n", cnt);
+					break;
+				}
+				check_stdin();
+			case ask_all:
+				fflush(stdout);
+				fgets(line, 128, stdin);
+				strip(line);
+				if (line[0] == '?') {
+					printf("\n%s\n", menu->sym->help ?
+						menu->sym->help : nohelp_text);
+					continue;
+				}
+				if (!line[0])
+					cnt = def;
+				else if (isdigit(line[0]))
+					cnt = atoi(line);
+				else
+					continue;
+				break;
+			case set_random:
+				def = (random() % cnt) + 1;
+			case set_default:
+			case set_yes:
+			case set_mod:
+			case set_no:
 				cnt = def;
 				printf("%d\n", cnt);
 				break;
-			}
-			check_stdin();
-		case ask_all:
-			fflush(stdout);
-			fgets(line, 128, stdin);
-			strip(line);
-			if (line[0] == '?') {
-				printf("\n%s\n", menu->sym->help ?
-					menu->sym->help : nohelp_text);
-				continue;
-			}
-			if (!line[0])
-				cnt = def;
-			else if (isdigit(line[0]))
-				cnt = atoi(line);
-			else
-				continue;
-			break;
-		case set_random:
-			def = (random() % cnt) + 1;
-		case set_default:
-		case set_yes:
-		case set_mod:
-		case set_no:
-			cnt = def;
-			printf("%d\n", cnt);
-			break;
 		}
 
 	conf_childs:
@@ -411,20 +411,20 @@
 		const char *prompt;
 
 		switch (prop->type) {
-		case P_MENU:
-			if (input_mode == ask_silent && rootEntry != menu) {
-				check_conf(menu);
-				return;
-			}
-		case P_COMMENT:
-			prompt = menu_get_prompt(menu);
-			if (prompt)
-				printf("%*c\n%*c %s\n%*c\n",
-					indent, '*',
-					indent, '*', prompt,
-					indent, '*');
-		default:
-			;
+			case P_MENU:
+				if (input_mode == ask_silent && rootEntry != menu) {
+					check_conf(menu);
+					return;
+				}
+			case P_COMMENT:
+				prompt = menu_get_prompt(menu);
+				if (prompt)
+					printf("%*c\n%*c %s\n%*c\n",
+						indent, '*',
+						indent, '*', prompt,
+						indent, '*');
+			default:
+				;
 		}
 	}
 
@@ -439,14 +439,14 @@
 	}
 
 	switch (sym->type) {
-	case S_INT:
-	case S_HEX:
-	case S_STRING:
-		conf_string(menu);
-		break;
-	default:
-		conf_sym(menu);
-		break;
+		case S_INT:
+		case S_HEX:
+		case S_STRING:
+				conf_string(menu);
+				break;
+		default:
+				conf_sym(menu);
+				break;
 	}
 
 conf_childs:
@@ -535,32 +535,32 @@
 	conf_parse(name);
 	//zconfdump(stdout);
 	switch (input_mode) {
-	case set_default:
-		if (!defconfig_file)
-			defconfig_file = conf_get_default_confname();
-		if (conf_read(defconfig_file)) {
-			printf("***\n"
-				"*** Can't find default configuration \"%s\"!\n"
-				"***\n", defconfig_file);
-			exit(1);
-		}
-		break;
-	case ask_silent:
-		if (stat(".config", &tmpstat)) {
-			printf("***\n"
-				"*** You have not yet configured your kernel!\n"
-				"***\n"
-				"*** Please run some configurator (e.g. \"make oldconfig\" or\n"
-				"*** \"make menuconfig\" or \"make xconfig\").\n"
-				"***\n");
-			exit(1);
-		}
-	case ask_all:
-	case ask_new:
-		conf_read(NULL);
-		break;
-	default:
+		case set_default:
+			if (!defconfig_file)
+				defconfig_file = conf_get_default_confname();
+			if (conf_read(defconfig_file)) {
+				printf("***\n"
+					"*** Can't find default configuration \"%s\"!\n"
+					"***\n", defconfig_file);
+				exit(1);
+			}
 		break;
+		case ask_silent:
+			if (stat(".config", &tmpstat)) {
+				printf("***\n"
+					"*** You have not yet configured your kernel!\n"
+					"***\n"
+					"*** Please run some configurator (e.g. \"make oldconfig\" or\n"
+					"*** \"make menuconfig\" or \"make xconfig\").\n"
+					"***\n");
+				exit(1);
+			}
+		case ask_all:
+		case ask_new:
+			conf_read(NULL);
+			break;
+		default:
+			break;
 	}
 
 	if (input_mode != ask_silent) {
diff -Naur linux-2.6.7-rc2/scripts/kconfig/Makefile linux-2.6.7-rc2-ff1/scripts/kconfig/Makefile
--- linux-2.6.7-rc2/scripts/kconfig/Makefile	2004-05-10 04:33:21.000000000 +0200
+++ linux-2.6.7-rc2-ff1/scripts/kconfig/Makefile	2004-05-31 13:41:54.000000000 +0200
@@ -2,7 +2,7 @@
 # Kernel configuration targets
 # These targets are used from top-level makefile
 
-.PHONY: oldconfig xconfig gconfig menuconfig config silentoldconfig
+.PHONY: oldconfig xconfig gconfig menuconfig config silentoldconfig webconfig
 
 xconfig: $(obj)/qconf
 	$< arch/$(ARCH)/Kconfig
@@ -23,6 +23,9 @@
 silentoldconfig: $(obj)/conf
 	$< -s arch/$(ARCH)/Kconfig
 
+webconfig: $(obj)/wconf
+	mv $(obj)/wconf ./
+
 .PHONY: randconfig allyesconfig allnoconfig allmodconfig defconfig
 
 randconfig: $(obj)/conf
@@ -47,6 +50,7 @@
 help:
 	@echo  '  oldconfig	  - Update current config utilising a line-oriented program'
 	@echo  '  menuconfig	  - Update current config utilising a menu based program'
+	@echo  '  webconfig	  - Create a kernel config CGI for your favourite httpd'
 	@echo  '  xconfig	  - Update current config utilising a QT based front-end'
 	@echo  '  gconfig	  - Update current config utilising a GTK based front-end'
 	@echo  '  defconfig	  - New config with default answer to all options'
@@ -67,9 +71,10 @@
 
 libkconfig-objs := zconf.tab.o
 
-host-progs	:= conf mconf qconf gconf
+host-progs	:= conf mconf qconf gconf wconf
 conf-objs	:= conf.o  libkconfig.so
 mconf-objs	:= mconf.o libkconfig.so
+wconf-objs	:= wconf.o libkconfig.so
 
 ifeq ($(MAKECMDGOALS),xconfig)
 	qconf-target := 1
@@ -101,7 +106,7 @@
 HOSTLOADLIBES_gconf	= `pkg-config gtk+-2.0 gmodule-2.0 libglade-2.0 --libs`
 HOSTCFLAGS_gconf.o	= `pkg-config gtk+-2.0 gmodule-2.0 libglade-2.0 --cflags`
 
-$(obj)/conf.o $(obj)/mconf.o $(obj)/qconf.o $(obj)/gconf.o: $(obj)/zconf.tab.h
+$(obj)/conf.o $(obj)/mconf.o $(obj)/wconf.o $(obj)/qconf.o $(obj)/gconf.o: $(obj)/zconf.tab.h
 
 $(obj)/qconf.o: $(obj)/.tmp_qtcheck
 
diff -Naur linux-2.6.7-rc2/scripts/kconfig/mconf.c linux-2.6.7-rc2-ff1/scripts/kconfig/mconf.c
--- linux-2.6.7-rc2/scripts/kconfig/mconf.c	2004-05-10 04:32:26.000000000 +0200
+++ linux-2.6.7-rc2-ff1/scripts/kconfig/mconf.c	2004-05-31 20:42:02.000000000 +0200
@@ -21,77 +21,7 @@
 
 #define LKC_DIRECT_LINK
 #include "lkc.h"
-
-static char menu_backtitle[128];
-static const char menu_instructions[] =
-	"Arrow keys navigate the menu.  "
-	"<Enter> selects submenus --->.  "
-	"Highlighted letters are hotkeys.  "
-	"Pressing <Y> includes, <N> excludes, <M> modularizes features.  "
-	"Press <Esc><Esc> to exit, <?> for Help.  "
-	"Legend: [*] built-in  [ ] excluded  <M> module  < > module capable",
-radiolist_instructions[] =
-	"Use the arrow keys to navigate this window or "
-	"press the hotkey of the item you wish to select "
-	"followed by the <SPACE BAR>. "
-	"Press <?> for additional information about this option.",
-inputbox_instructions_int[] =
-	"Please enter a decimal value. "
-	"Fractions will not be accepted.  "
-	"Use the <TAB> key to move from the input field to the buttons below it.",
-inputbox_instructions_hex[] =
-	"Please enter a hexadecimal value. "
-	"Use the <TAB> key to move from the input field to the buttons below it.",
-inputbox_instructions_string[] =
-	"Please enter a string value. "
-	"Use the <TAB> key to move from the input field to the buttons below it.",
-setmod_text[] =
-	"This feature depends on another which has been configured as a module.\n"
-	"As a result, this feature will be built as a module.",
-nohelp_text[] =
-	"There is no help available for this kernel option.\n",
-load_config_text[] =
-	"Enter the name of the configuration file you wish to load.  "
-	"Accept the name shown to restore the configuration you "
-	"last retrieved.  Leave blank to abort.",
-load_config_help[] =
-	"\n"
-	"For various reasons, one may wish to keep several different kernel\n"
-	"configurations available on a single machine.\n"
-	"\n"
-	"If you have saved a previous configuration in a file other than the\n"
-	"kernel's default, entering the name of the file here will allow you\n"
-	"to modify that configuration.\n"
-	"\n"
-	"If you are uncertain, then you have probably never used alternate\n"
-	"configuration files.  You should therefor leave this blank to abort.\n",
-save_config_text[] =
-	"Enter a filename to which this configuration should be saved "
-	"as an alternate.  Leave blank to abort.",
-save_config_help[] =
-	"\n"
-	"For various reasons, one may wish to keep different kernel\n"
-	"configurations available on a single machine.\n"
-	"\n"
-	"Entering a file name here will allow you to later retrieve, modify\n"
-	"and use the current configuration as an alternate to whatever\n"
-	"configuration options you have selected at that time.\n"
-	"\n"
-	"If you are uncertain what all this means then you should probably\n"
-	"leave this blank.\n"
-;
-
-static char buf[4096], *bufptr = buf;
-static char input_buf[4096];
-static char filename[PATH_MAX+1] = ".config";
-static char *args[1024], **argptr = args;
-static int indent;
-static struct termios ios_org;
-static int rows, cols;
-static struct menu *current_menu;
-static int child_count;
-static int do_resize;
-static int single_menu_mode;
+#include "mconf.h"
 
 static void conf(struct menu *menu);
 static void conf_choice(struct menu *menu);
@@ -205,6 +135,7 @@
 
 static int exec_conf(void)
 {
+
 	int pipefd[2], stat, size;
 	struct sigaction sa;
 	sigset_t sset, osset;
@@ -235,6 +166,8 @@
 
 	close(pipefd[1]);
 	bufptr = input_buf;
+
+
 	while (1) {
 		size = input_buf + sizeof(input_buf) - bufptr;
 		size = read(pipefd[0], bufptr, size);
@@ -248,6 +181,7 @@
 		}
 		bufptr += size;
 	}
+
 	*bufptr++ = 0;
 	close(pipefd[0]);
 	waitpid(pid, &stat, 0);
@@ -439,6 +373,7 @@
 	struct symbol *sym;
 	char active_entry[40];
 	int stat, type, i;
+	char buffer[24];
 
 	unlink("lxdialog.scrltmp");
 	active_entry[0] = 0;
@@ -484,16 +419,17 @@
 
 		sym = NULL;
 		submenu = NULL;
-		if (sscanf(input_buf + 1, "%p", &submenu) == 1)
+		if (sscanf(input_buf + 1, "%p", &submenu) == 1){
 			sym = submenu->sym;
-
+		}
+		printf("%s\n\r", prompt);
 		switch (stat) {
 		case 0:
 			switch (type) {
 			case 'm':
-				if (single_menu_mode)
+				if (single_menu_mode){
 					submenu->data = (void *) (long) !submenu->data;
-				else
+				}else
 					conf(submenu);
 				break;
 			case 't':
@@ -783,7 +719,7 @@
 	atexit(conf_cleanup);
 	init_wsize();
 	conf(&rootmenu);
-
+/*
 	do {
 		cprint_init();
 		cprint("--yesno");
@@ -810,6 +746,6 @@
 			"Your kernel configuration changes were NOT saved."
 			"\n\n");
 	}
-
+*/
 	return 0;
 }
diff -Naur linux-2.6.7-rc2/scripts/kconfig/mconf.h linux-2.6.7-rc2-ff1/scripts/kconfig/mconf.h
--- linux-2.6.7-rc2/scripts/kconfig/mconf.h	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.6.7-rc2-ff1/scripts/kconfig/mconf.h	2004-05-30 22:54:08.000000000 +0200
@@ -0,0 +1,77 @@
+/*
+ * mconf.h
+ *
+ * Configuration text interface used by menuconfig & webconfig
+ *
+ * Feature-split / FabF 05-2004
+ *
+ */
+static char menu_backtitle[128];
+static const char menu_instructions[] =
+	"Arrow keys navigate the menu.  "
+	"<Enter> selects submenus --->.  "
+	"Highlighted letters are hotkeys.  "
+	"Pressing <Y> includes, <N> excludes, <M> modularizes features.  "
+	"Press <Esc><Esc> to exit, <?> for Help.  "
+	"Legend: [*] built-in  [ ] excluded  <M> module  < > module capable",
+radiolist_instructions[] =
+	"Use the arrow keys to navigate this window or "
+	"press the hotkey of the item you wish to select "
+	"followed by the <SPACE BAR>. "
+	"Press <?> for additional information about this option.",
+inputbox_instructions_int[] =
+	"Please enter a decimal value. "
+	"Fractions will not be accepted.  "
+	"Use the <TAB> key to move from the input field to the buttons below it.",
+inputbox_instructions_hex[] =
+	"Please enter a hexadecimal value. "
+	"Use the <TAB> key to move from the input field to the buttons below it.",
+inputbox_instructions_string[] =
+	"Please enter a string value. "
+	"Use the <TAB> key to move from the input field to the buttons below it.",
+setmod_text[] =
+	"This feature depends on another which has been configured as a module.\n"
+	"As a result, this feature will be built as a module.",
+nohelp_text[] =
+	"There is no help available for this kernel option.\n",
+load_config_text[] =
+	"Enter the name of the configuration file you wish to load.  "
+	"Accept the name shown to restore the configuration you "
+	"last retrieved.  Leave blank to abort.",
+load_config_help[] =
+	"\n"
+	"For various reasons, one may wish to keep several different kernel\n"
+	"configurations available on a single machine.\n"
+	"\n"
+	"If you have saved a previous configuration in a file other than the\n"
+	"kernel's default, entering the name of the file here will allow you\n"
+	"to modify that configuration.\n"
+	"\n"
+	"If you are uncertain, then you have probably never used alternate\n"
+	"configuration files.  You should therefor leave this blank to abort.\n",
+save_config_text[] =
+	"Enter a filename to which this configuration should be saved "
+	"as an alternate.  Leave blank to abort.",
+save_config_help[] =
+	"\n"
+	"For various reasons, one may wish to keep different kernel\n"
+	"configurations available on a single machine.\n"
+	"\n"
+	"Entering a file name here will allow you to later retrieve, modify\n"
+	"and use the current configuration as an alternate to whatever\n"
+	"configuration options you have selected at that time.\n"
+	"\n"
+	"If you are uncertain what all this means then you should probably\n"
+	"leave this blank.\n"
+;
+static char buf[4096], *bufptr = buf;
+static char input_buf[4096];
+static char filename[PATH_MAX+1] = ".config";
+static char *args[1024], **argptr = args;
+static int indent;
+static struct termios ios_org;
+static int rows, cols;
+static struct menu *current_menu;
+static int child_count;
+static int do_resize;
+static int single_menu_mode;
diff -Naur linux-2.6.7-rc2/scripts/kconfig/wconf.c linux-2.6.7-rc2-ff1/scripts/kconfig/wconf.c
--- linux-2.6.7-rc2/scripts/kconfig/wconf.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.6.7-rc2-ff1/scripts/kconfig/wconf.c	2004-06-01 22:01:20.000000000 +0200
@@ -0,0 +1,718 @@
+/*
+ *  webconfig
+ *
+ *  Kernel configuration online
+ *
+ *  Copyright 2003-2004 Fabian Frederick <ffrederick@users.sourceforge.net>
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ *  Note : This project is mainly based on Roman Zippel libkconfig
+ *	   Menu management largely copy/paste from Roman's work
+ *	   done in mconf.
+ *	   mconf.h being mconf.c wconf.c common doc text.
+ *
+ */
+
+#include <sys/ioctl.h>
+#include <sys/wait.h>
+#include <ctype.h>
+#include <errno.h>
+#include <fcntl.h>
+#include <limits.h>
+#include <signal.h>
+#include <stdarg.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include <string.h>
+#include <termios.h>
+#include <unistd.h>
+#include <stdio.h>
+#define LKC_DIRECT_LINK
+#include "lkc.h"
+#include "mconf.h" /* Using curses doc. interface */
+
+static int indent;
+static struct menu *current_menu;
+static int child_count;
+static int single_menu_mode;
+
+int display_file (const char *szname)
+{
+
+	FILE *file;
+	char szbuffer[256];
+
+	file = fopen(szname, "rb");
+	if (file) {
+		while (!feof(file)) {
+			printf("%s", fgets(szbuffer, 256, file));
+
+		}
+	}else   return 0;
+
+	fclose(file);
+	return 1;
+}
+
+char* wash_query (char *szquery)
+{
+	char buf[256];
+	char buf2[16];
+	char *szwquery=buf;
+
+	while (*szquery){
+		switch(*szquery){
+			case '%':
+				szquery++;
+				strncpy(buf2, szquery, 2);
+				(*szwquery)=(char)strtol(buf2, NULL, 16);
+				szquery++;
+				break;
+			case '+':
+				(*szwquery)=' ';
+				break;
+			default:
+				(*szwquery)=(*szquery);
+				break;
+		}
+		szquery++;
+		szwquery++;
+
+	}
+	(*szwquery)=NULL;
+	return buf;
+
+}
+
+char* read_query (void)
+{
+
+	char *szmethod = getenv("REQUEST_METHOD");
+	char *szquery=NULL;
+
+	if(!strcmp(szmethod, "GET")){
+		szquery = getenv("QUERY_STRING");
+//		printf("%s", szquery);
+	}
+	return wash_query(szquery);
+
+	/*if (szmethod){
+
+	} else return NULL;*/
+}
+
+int split_arg (char *szorig, char *szname, char*szvalue)
+{
+
+ int current=0,
+     i=0;
+
+ while ((*szorig)&&((*szorig) != '&')){
+	if((*szorig) != '=')
+		if(current)
+			(*(szvalue++))=*szorig;
+		  else  (*(szname++))=*szorig;
+
+	else{
+		current++;
+	}
+
+	szorig++;
+	i++;
+ }
+ *szvalue=*szname=NULL;
+
+ return i;
+
+}
+
+void print_header(void)
+{
+
+	printf("Content-type:text/html \n\n\r");
+	printf("<html>");
+	printf("<head>");
+	printf("<title>wconf - Web Kernel Configuration tool</title>");
+	if (!display_file("scripts/kconfig/wconf.css")) {
+		printf("Unable to display style sheet informations");
+		exit(1);
+	}
+	printf("</head>");
+	printf("<body>");
+	printf("<div id=\"webconfig\">");
+}
+
+void print_footer(void)
+{
+	printf("</div>"); //Closing webconfig
+	printf("</body>");
+	printf("</html>");
+}
+
+pid_t pid;
+
+static void winch_handler(int sig)
+{
+	if (!do_resize) {
+		kill(pid, SIGINT);
+		do_resize = 1;
+	}
+}
+
+static int exec_conf(void)
+{
+	int pipefd[2], stat, size;
+	struct sigaction sa;
+	sigset_t sset, osset;
+
+	sigemptyset(&sset);
+	sigaddset(&sset, SIGINT);
+	sigprocmask(SIG_BLOCK, &sset, &osset);
+
+	signal(SIGINT, SIG_DFL);
+
+	sa.sa_handler = winch_handler;
+	sigemptyset(&sa.sa_mask);
+	sa.sa_flags = SA_RESTART;
+	sigaction(SIGWINCH, &sa, NULL);
+
+	*argptr++ = NULL;
+
+	pipe(pipefd);
+	pid = fork();
+	if (pid == 0) {
+		sigprocmask(SIG_SETMASK, &osset, NULL);
+		dup2(pipefd[1], 2);
+		close(pipefd[0]);
+		close(pipefd[1]);
+		execv(args[0], args);
+		_exit(EXIT_FAILURE);
+	}
+
+	close(pipefd[1]);
+	bufptr = input_buf;
+	while (1) {
+		size = input_buf + sizeof(input_buf) - bufptr;
+		size = read(pipefd[0], bufptr, size);
+		if (size <= 0) {
+			if (size < 0) {
+				if (errno == EINTR || errno == EAGAIN)
+					continue;
+				perror("read");
+			}
+			break;
+		}
+		bufptr += size;
+	}
+	*bufptr++ = 0;
+	close(pipefd[0]);
+	waitpid(pid, &stat, 0);
+/*
+	if (do_resize) {
+		init_wsize();
+		do_resize = 0;
+		sigprocmask(SIG_SETMASK, &osset, NULL);
+		return -1;
+	}*/
+	if (WIFSIGNALED(stat)) {
+		printf("\finterrupted(%d)\n", WTERMSIG(stat));
+		exit(1);
+	}
+#if 0
+	printf("\fexit state: %d\nexit data: '%s'\n", WEXITSTATUS(stat), input_buf);
+	sleep(1);
+#endif
+	sigpending(&sset);
+	if (sigismember(&sset, SIGINT)) {
+		printf("\finterrupted\n");
+		exit(1);
+	}
+	sigprocmask(SIG_SETMASK, &osset, NULL);
+
+	return WEXITSTATUS(stat);
+}
+
+static void conf_load(void)
+{
+	int stat;
+
+	while (1) {
+		/*
+		cprint_init();
+		cprint("--inputbox");
+		cprint(load_config_text);
+		cprint("11");
+		cprint("55");
+		cprint("%s", filename);*/
+		stat = exec_conf();
+		switch(stat) {
+		case 0:
+			if (!input_buf[0])
+				return;
+			if (!conf_read(input_buf))
+				return;
+			//show_textbox(NULL, "File does not exist!", 5, 38);
+			break;
+		case 1:
+			//show_helptext("Load Alternate Configuration", load_config_help);
+			break;
+		case 255:
+			return;
+		}
+	}
+}
+
+static void conf_string(struct menu *menu)
+{
+	const char *prompt = menu_get_prompt(menu);
+	int stat;
+
+	while (1) {
+		/*
+		cprint_init();
+		cprint("--title");
+		cprint("%s", prompt ? prompt : "Main Menu");
+		cprint("--inputbox");
+		*/
+		switch (sym_get_type(menu->sym)) {
+		case S_INT:
+			//cprint(inputbox_instructions_int);
+			break;
+		case S_HEX:
+			//cprint(inputbox_instructions_hex);
+			break;
+		case S_STRING:
+			//cprint(inputbox_instructions_string);
+			break;
+		default:
+			/* panic? */;
+		}
+		/*cprint("10");
+		cprint("75");
+		cprint("%s", sym_get_string_value(menu->sym));
+		*/
+		stat = exec_conf();
+		switch (stat) {
+		case 0:
+			if (sym_set_string_value(menu->sym, input_buf))
+				return;
+			//show_textbox(NULL, "You have made an invalid entry.", 5, 43);
+			break;
+		case 1:
+			//show_help(menu);
+			break;
+		case 255:
+			return;
+		}
+	}
+}
+
+static void conf_choice(struct menu *menu)
+{
+	const char *prompt = menu_get_prompt(menu);
+	struct menu *child;
+	struct symbol *active;
+	int stat;
+
+	active = sym_get_choice_value(menu->sym);
+	while (1) {
+		/*
+		cprint_init();
+		cprint("--title");
+		cprint("%s", prompt ? prompt : "Main Menu");
+		cprint("--radiolist");
+		cprint(radiolist_instructions);
+		cprint("15");
+		cprint("70");
+		cprint("6");
+		*/
+		current_menu = menu;
+		for (child = menu->list; child; child = child->next) {
+			if (!menu_is_visible(child))
+				continue;
+			/*cprint("%p", child);
+			cprint("%s", menu_get_prompt(child));*/
+			/*
+			if (child->sym == sym_get_choice_value(menu->sym))
+				cprint("ON");
+			else if (child->sym == active)
+				cprint("SELECTED");
+			else
+				cprint("OFF");
+			*/
+		}
+
+		stat = exec_conf();
+		switch (stat) {
+		case 0:
+			if (sscanf(input_buf, "%p", &child) != 1)
+				break;
+			sym_set_tristate_value(child->sym, yes);
+			return;
+		case 1:/*
+			if (sscanf(input_buf, "%p", &child) == 1) {
+				show_help(child);
+				active = child->sym;
+			}else
+				show_help(menu);
+			*/
+			break;
+		case 255:
+			return;
+		}
+	}
+}
+
+static void conf_save(void)
+{
+	int stat;
+
+	while (1) {
+/*
+		cprint_init();
+		cprint("--inputbox");
+		cprint(save_config_text);
+		cprint("11");
+		cprint("55");
+		cprint("%s", filename);
+*/
+		stat = exec_conf();
+		switch(stat) {
+		case 0:
+			if (!input_buf[0])
+				return;
+			if (!conf_write(input_buf))
+				return;
+			//show_textbox(NULL, "Can't create file!  Probably a nonexistent directory.", 5, 60);
+			break;
+		case 1:
+			//show_helptext("Save Alternate Configuration", save_config_help);
+			break;
+		case 255:
+			return;
+		}
+	}
+}
+
+static void conf_cleanup(void)
+{
+	tcsetattr(1, TCSAFLUSH, &ios_org);
+	unlink(".help.tmp");
+	unlink("lxdialog.scrltmp");
+}
+
+void display_symbol(struct menu *menu)
+{
+	printf("<table><tr><td id=\"help\"><h3>%s</h3>", menu_get_prompt(menu));
+	printf("%s</td></tr></table>", menu->sym->help);
+}
+
+static void build_conf(struct menu *menu)
+{
+	struct symbol *sym;
+	struct property *prop;
+	struct menu *child;
+	int type, tmp, doint = 2;
+	tristate val;
+	char ch;
+
+	if (!menu_is_visible(menu))
+		return;
+
+	sym = menu->sym;
+	prop = menu->prompt;
+	if (!sym) {
+		if (prop && menu != current_menu) {
+			const char *prompt = menu_get_prompt(menu);
+			switch (prop->type) {
+			case P_MENU:
+				child_count++;
+				if (single_menu_mode)
+					    printf("--%s<br>", prompt);
+				      else  printf("<a href=\"wconf?file=%s&prompt=%s\">%s</a><br>", menu->file->name,prompt,prompt);
+				if (single_menu_mode && menu->data)
+					goto conf_childs;
+				return;
+			default:
+				if (prompt) {
+					child_count++;
+					printf("%s", prompt);
+				}
+			}
+		} else
+			doint = 0;
+		goto conf_childs;
+	}
+
+	type = sym_get_type(sym);
+	if (sym_is_choice(sym)) {
+		struct symbol *def_sym = sym_get_choice_value(sym);
+		struct menu *def_menu = NULL;
+
+		child_count++;
+		for (child = menu->list; child; child = child->next) {
+			if (menu_is_visible(child) && child->sym == def_sym)
+				def_menu = child;
+		}
+
+		val = sym_get_tristate_value(sym);
+		if (sym_is_changable(sym)) {
+			printf("Tristate:%s", menu->sym->name);
+			/*cprint("t%p", menu);*/
+			switch (type) {
+			case S_BOOLEAN:
+				/*cprint1("[%c]", val == no ? ' ' : '*');*/
+				break;
+			case S_TRISTATE:
+				switch (val) {
+				case yes: ch = '*'; break;
+				case mod: ch = 'M'; break;
+				default:  ch = ' '; break;
+				}
+				/*cprint1("<%c>", ch);*/
+				break;
+			}
+		} else {
+			/*cprint("%c%p", def_menu ? 't' : ':', menu);
+			cprint1("   ");*/
+		}
+		printf("<h2>%s</h2>", menu_get_prompt(menu));
+		if (val == yes) {
+			if (def_menu) {
+				display_symbol(menu->list);
+			//	printf(">>%s", menu_get_prompt(def_menu));
+				/*cprint1("  --->");
+				cprint_done();*/
+				if (def_menu->list) {
+					indent += 2;
+					build_conf(def_menu);
+					indent -= 2;
+				}
+			} else
+				/*cprint_done();*/
+			return;
+		}
+		/*cprint_done();*/
+	} else {
+		if (menu == current_menu) {
+			/*cprint(":%p", menu);
+			cprint("---%*c%s", indent + 1, ' ', menu_get_prompt(menu));*/
+			goto conf_childs;
+		}
+		child_count++;
+		val = sym_get_tristate_value(sym);
+		if (sym_is_choice_value(sym) && val == yes) {
+			/*cprint(":%p", menu);
+			cprint1("   ");*/
+		} else {
+			switch (type) {
+			case S_BOOLEAN:
+				printf("%s<br>", menu->sym->name);
+				/*
+				if (sym_is_changable(sym))
+					cprint1("[%c]", val == no ? ' ' : '*');
+				else
+					cprint1("---");
+				*/
+				break;
+			case S_TRISTATE:
+				printf("%s<br>", menu->sym->name);
+				switch (val) {
+				case yes: ch = '*'; break;
+				case mod: ch = 'M'; break;
+				default:  ch = ' '; break;
+				}
+				/*if (sym_is_changable(sym))
+					cprint1("<%c>", ch);
+				else
+					cprint1("---");
+				*/
+				break;
+			default:
+				/*cprint("s%p", menu);*/
+				/*tmp = cprint1("(%s)", sym_get_string_value(sym));*/
+				tmp = indent - tmp + 4;
+				if (tmp < 0)
+					tmp = 0;
+				/*cprint1("%*c%s%s", tmp, ' ', menu_get_prompt(menu),
+					(sym_has_value(sym) || !sym_is_changable(sym)) ?
+					"" : " (NEW)");
+				cprint_done();*/
+				goto conf_childs;
+			}
+		}
+		/*cprint1("%*c%s%s", indent + 1, ' ', menu_get_prompt(menu),
+			(sym_has_value(sym) || !sym_is_changable(sym)) ?
+			"" : " (NEW)");*/
+		if (menu->prompt->type == P_MENU) {
+			/*cprint1("  --->");
+			cprint_done();*/
+			return;
+		}
+	}
+
+conf_childs:
+	indent += doint;
+	for (child = menu->list; child; child = child->next)
+		build_conf(child);
+	indent -= doint;
+}
+
+static void conf(struct menu *menu)
+{
+	struct menu *submenu;
+	const char *prompt = menu_get_prompt(menu);
+	struct symbol *sym;
+	char active_entry[40];
+	int stat, type, i;
+
+	unlink("lxdialog.scrltmp");
+	active_entry[0] = 0;
+	current_menu = menu;
+	build_conf(menu);
+	if (menu == &rootmenu) {
+		printf("Alternate ...");
+	}
+	stat = exec_conf();
+	type = input_buf[0];
+
+	for (i = 0; input_buf[i] && !isspace(input_buf[i]); i++)
+		;
+	if (i >= sizeof(active_entry))
+		i = sizeof(active_entry) - 1;
+	input_buf[i] = 0;
+	strcpy(active_entry, input_buf);
+
+	sym = NULL;
+	submenu = NULL;
+	if (sscanf(input_buf + 1, "%p", &submenu) == 1)
+		sym = submenu->sym;
+
+	switch (stat) {
+	case 0:
+		switch (type) {
+		case 'm':
+			if (single_menu_mode)
+				submenu->data = (void *) (long) !submenu->data;
+			else
+				conf(submenu);
+			break;
+		case 't':
+			if (sym_is_choice(sym) && sym_get_tristate_value(sym) == yes)
+				conf_choice(submenu);
+			else if (submenu->prompt->type == P_MENU)
+				conf(submenu);
+			break;
+		case 's':
+			conf_string(submenu);
+			break;
+		case 'L':
+			conf_load();
+			break;
+		case 'S':
+			conf_save();
+			break;
+		}
+		break;
+	case 2:
+		/*
+		if (sym)
+			show_help(submenu);
+		else
+			show_readme();
+		break;*/
+	case 3:
+		if (type == 't') {
+			if (sym_set_tristate_value(sym, yes))
+				break;
+			/*if (sym_set_tristate_value(sym, mod))
+			show_textbox(NULL, setmod_text, 6, 74);*/
+		}
+		break;
+	case 4:
+		if (type == 't')
+			sym_set_tristate_value(sym, no);
+		break;
+	case 5:
+		if (type == 't')
+			sym_set_tristate_value(sym, mod);
+		break;
+	case 6:
+		if (type == 't')
+			sym_toggle_tristate_value(sym);
+		else if (type == 'm')
+			conf(submenu);
+		break;
+	}
+}
+
+struct menu* find_menu (const char *szfile, const char *szprompt, struct menu* currentmenu)
+{
+	if (!strcmp(menu_get_prompt(currentmenu), szprompt)){
+		return currentmenu;
+	}else
+	if(currentmenu->next)
+		  return find_menu(szfile, szprompt,currentmenu->next);
+	     else if (currentmenu->list)
+			return find_menu(szfile, szprompt, currentmenu->list);
+
+}
+
+void main()
+{
+
+	struct symbol *sym;
+	char filename[128],
+	     filevalue[128],
+	     promptname[128],
+	     promptvalue[128];
+	int ind;
+
+	struct menu *currentmenu;
+
+	/*
+	 *mconf is based on root to leaves parsing for reentrance
+	 *We'll use that facility for menu bar display
+	 */
+
+	conf_parse("arch/i386/Kconfig");
+	print_header();
+	ind=split_arg(read_query(), filename, filevalue);
+	split_arg(read_query()+ind+1,  promptname, promptvalue);
+
+	conf_read(NULL);
+	sym = sym_lookup("KERNELRELEASE", 0);
+	sym_calc_value(sym);
+
+	printf("webConfig for Linux kernel %s", sym_get_string_value(sym));
+	printf("<div id=\"menu\">");
+	conf(&rootmenu);
+	printf("</div>");
+	printf("<div id=\"central\">");
+
+	/*
+	 * Find our way from initialized rootmenu up to required
+	 * 'key'.This key is file & prompt.
+	 */
+
+	currentmenu=find_menu(filevalue, promptvalue, rootmenu.list);
+	printf("<h1>%s</h1>", promptvalue);
+	conf(currentmenu);
+
+	printf("</div>");
+	print_footer();
+
+}
diff -Naur linux-2.6.7-rc2/scripts/kconfig/wconf.css linux-2.6.7-rc2-ff1/scripts/kconfig/wconf.css
--- linux-2.6.7-rc2/scripts/kconfig/wconf.css	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.6.7-rc2-ff1/scripts/kconfig/wconf.css	2004-06-01 22:37:34.000000000 +0200
@@ -0,0 +1,67 @@
+<style>
+div#webconfig{
+	text-align:center;
+	margin: auto;
+	float: top;
+}
+div#menu{
+	background-color:#c3d7bd;
+	text-align: left;
+	float: left;
+	width: 250px;
+	color: white;
+	height:4000px;
+}
+div#central{
+	margin-left: 5px;
+	margin-right: 10px;
+	text-align:left;
+	float: top;
+	color: black;
+}
+body{
+	font-family: monospace;
+	font-size: 13px;
+	background-color:#ffffff;
+}
+
+h1{
+	background-color:#f3f7fd;
+	border-color:#131312;
+	border-width:1px;
+	font-size:13px;
+	font-family: monospace;
+	border-style:solid;
+	color: blue;
+}
+
+h2{
+	background-color:#f3f7fd;
+	border-color:#131312;
+	border-width:1px;
+	font-size:13px;
+	border-style:solid;
+	color: red;
+}
+h3{
+	background-color:#f3f7fd;
+	border-color:#131312;
+	border-width:1px;
+	font-size:13px;
+	border-style:solid;
+	color: black;
+}
+
+td#help{
+
+	font-size:10px;
+	background-color:#d3e7dd;
+	color: blue;
+}
+a{
+	color:blue;
+}
+a#menu{
+	color:white;
+}
+</style>
