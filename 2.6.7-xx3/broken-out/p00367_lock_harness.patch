diff -urN linux-orig/fs/gfs_locking/lock_harness/main.c linux-patched/fs/gfs_locking/lock_harness/main.c
--- linux-orig/fs/gfs_locking/lock_harness/main.c	1969-12-31 18:00:00.000000000 -0600
+++ linux-patched/fs/gfs_locking/lock_harness/main.c	2004-06-16 12:03:10.006671787 -0500
@@ -0,0 +1,226 @@
+/******************************************************************************
+*******************************************************************************
+**
+**  Copyright (C) Sistina Software, Inc.  1997-2003  All rights reserved.
+**  Copyright (C) 2004 Red Hat, Inc.  All rights reserved.
+**
+**  This copyrighted material is made available to anyone wishing to use,
+**  modify, copy, or redistribute it subject to the terms and conditions
+**  of the GNU General Public License v.2.
+**
+*******************************************************************************
+******************************************************************************/
+
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/string.h>
+#include <linux/slab.h>
+#include <linux/wait.h>
+#include <linux/sched.h>
+#include <linux/kmod.h>
+#include <linux/lm_interface.h>
+
+#define RELEASE_NAME "<CVS>"
+
+struct lmh_wrapper {
+	struct list_head lw_list;
+	struct lm_lockops *lw_ops;
+};
+
+static struct semaphore lmh_lock;
+static struct list_head lmh_list;
+
+/**
+ * lm_register_proto - Register a low-level locking protocol
+ * @proto: the protocol definition
+ *
+ * Returns: 0 on success, -EXXX on failure
+ */
+
+int
+lm_register_proto(struct lm_lockops *proto)
+{
+	struct list_head *tmp, *head;
+	struct lmh_wrapper *lw;
+
+	down(&lmh_lock);
+
+	for (head = &lmh_list, tmp = head->next; tmp != head; tmp = tmp->next) {
+		lw = list_entry(tmp, struct lmh_wrapper, lw_list);
+
+		if (strcmp(lw->lw_ops->lm_proto_name, proto->lm_proto_name) == 0) {
+			up(&lmh_lock);
+			printk("lock_harness:  protocol %s already exists\n",
+			       proto->lm_proto_name);
+			return -EEXIST;
+		}
+	}
+
+	lw = kmalloc(sizeof (struct lmh_wrapper), GFP_KERNEL);
+	if (!lw) {
+		up(&lmh_lock);
+		return -ENOMEM;
+	}
+	memset(lw, 0, sizeof (struct lmh_wrapper));
+
+	lw->lw_ops = proto;
+	list_add(&lw->lw_list, &lmh_list);
+
+	up(&lmh_lock);
+
+	return 0;
+}
+
+/**
+ * lm_unregister_proto - Unregister a low-level locking protocol
+ * @proto: the protocol definition
+ *
+ */
+
+void
+lm_unregister_proto(struct lm_lockops *proto)
+{
+	struct list_head *tmp, *head;
+	struct lmh_wrapper *lw = NULL;
+
+	down(&lmh_lock);
+
+	for (head = &lmh_list, tmp = head->next; tmp != head; tmp = tmp->next) {
+		lw = list_entry(tmp, struct lmh_wrapper, lw_list);
+
+		if (strcmp(lw->lw_ops->lm_proto_name, proto->lm_proto_name) == 0) {
+			list_del(&lw->lw_list);
+			up(&lmh_lock);
+			kfree(lw);
+			return;
+		}
+	}
+
+	up(&lmh_lock);
+
+	printk("lock_harness:  can't unregister lock protocol %s\n",
+	       proto->lm_proto_name);
+}
+
+/**
+ * lm_mount - Mount a lock protocol
+ * @proto_name - the name of the protocol
+ * @table_name - the name of the lock space
+ * @host_data - data specific to this host
+ * @cb - the callback to the code using the lock module
+ * @fsdata - data to pass back with the callback
+ * @min_lvb_size - the mininum LVB size that the caller can deal with
+ * @lockstruct - a structure returned describing the mount
+ *
+ * Returns: 0 on success, -EXXX on failure
+ */
+
+int
+lm_mount(char *proto_name, char *table_name, char *host_data,
+	 lm_callback_t cb, lm_fsdata_t * fsdata,
+	 unsigned int min_lvb_size, struct lm_lockstruct *lockstruct)
+{
+	struct list_head *tmp;
+	struct lmh_wrapper *lw = NULL;
+	int try = 0;
+	int error;
+
+      retry:
+	down(&lmh_lock);
+
+	for (tmp = lmh_list.next; tmp != &lmh_list; tmp = tmp->next) {
+		lw = list_entry(tmp, struct lmh_wrapper, lw_list);
+
+		if (strcmp(lw->lw_ops->lm_proto_name, proto_name) == 0)
+			break;
+		else
+			lw = NULL;
+	}
+
+	if (!lw) {
+		if (!try && capable(CAP_SYS_MODULE)) {
+			try = 1;
+			up(&lmh_lock);
+			request_module(proto_name);
+			goto retry;
+		}
+		printk("lock_harness:  can't find protocol %s\n", proto_name);
+		error = -ENOENT;
+		goto out;
+	}
+
+	if (!try_module_get(lw->lw_ops->lm_owner)) {
+		try = 0;
+		up(&lmh_lock);
+		current->state = TASK_UNINTERRUPTIBLE;
+		schedule_timeout(HZ);
+		goto retry;
+	}
+
+	error = lw->lw_ops->lm_mount(table_name, host_data,
+				     cb, fsdata, min_lvb_size, lockstruct);
+	if (error)
+		module_put(lw->lw_ops->lm_owner);
+
+      out:
+	up(&lmh_lock);
+
+	return error;
+}
+
+/**
+ * lm_unmount - unmount a lock module
+ * @lockstruct: the lockstruct passed into mount
+ *
+ */
+
+void
+lm_unmount(struct lm_lockstruct *lockstruct)
+{
+	down(&lmh_lock);
+	lockstruct->ls_ops->lm_unmount(lockstruct->ls_lockspace);
+	if (lockstruct->ls_ops->lm_owner)
+		module_put(lockstruct->ls_ops->lm_owner);
+	up(&lmh_lock);
+}
+
+/**
+ * init_lmh - Initialize the lock module harness
+ *
+ * Returns: 0 on success, -EXXX on failure
+ */
+
+int __init
+init_lmh(void)
+{
+	init_MUTEX(&lmh_lock);
+	INIT_LIST_HEAD(&lmh_list);
+
+	printk("Lock_Harness %s (built %s %s) installed\n",
+	       RELEASE_NAME, __DATE__, __TIME__);
+
+	return 0;
+}
+
+/**
+ * exit_lmh - cleanup the Lock Module Harness
+ *
+ * Returns: 0 on success, -EXXX on failure
+ */
+
+void __exit
+exit_lmh(void)
+{
+}
+
+module_init(init_lmh);
+module_exit(exit_lmh);
+
+MODULE_DESCRIPTION("GFS Lock Module Harness " RELEASE_NAME);
+MODULE_AUTHOR("Red Hat, Inc.");
+MODULE_LICENSE("GPL");
+
+EXPORT_SYMBOL_GPL(lm_register_proto);
+EXPORT_SYMBOL_GPL(lm_unregister_proto);
+EXPORT_SYMBOL_GPL(lm_mount);
+EXPORT_SYMBOL_GPL(lm_unmount);
diff -urN linux-orig/include/linux/lm_interface.h linux-patched/include/linux/lm_interface.h
--- linux-orig/include/linux/lm_interface.h	1969-12-31 18:00:00.000000000 -0600
+++ linux-patched/include/linux/lm_interface.h	2004-06-16 12:03:10.005672019 -0500
@@ -0,0 +1,193 @@
+/******************************************************************************
+*******************************************************************************
+**
+**  Copyright (C) Sistina Software, Inc.  1997-2003  All rights reserved.
+**  Copyright (C) 2004 Red Hat, Inc.  All rights reserved.
+**
+**  This copyrighted material is made available to anyone wishing to use,
+**  modify, copy, or redistribute it subject to the terms and conditions
+**  of the GNU General Public License v.2.
+**
+*******************************************************************************
+******************************************************************************/
+
+/*
+
+   Sooner or later, I need to put all the documentation back into this file.
+   In the mean time, here are some notes.
+
+   -  The lock module is now responsible for STOMITHing the an expired
+   client before calling the callback with type LM_CB_NEED_RECOVERY.
+
+   -  If mount() operation returns first == TRUE, GFS will check all the
+   journals.  GFS itself can't/shouldn't stomith the machines, so the lock module
+   needs to make sure that there are no zombie machines on any of the
+   journals.  (i.e. this should probably be on the first mount of the lock
+   space where all mounts by other machines are blocked.)  GFS will call
+   others_may_mount() when the filesystem is in a consistent state.
+
+   -  GFS can issue multiple simultaneous get_lock()s for the same lockname.
+   The lock module needs to deal with it, either by 1)  building a hash table
+   to lookup the structures and keeping a reference count so there is only
+   on lm_lock_t for a given lockname. or 2) just dealing with multiple
+   lm_lock_t structures for a given lockname.
+
+*/
+
+#ifndef __LM_INTERFACE_DOT_H__
+#define __LM_INTERFACE_DOT_H__
+
+typedef void lm_lockspace_t;
+typedef void lm_lock_t;
+typedef void lm_fsdata_t;
+typedef void (*lm_callback_t) (lm_fsdata_t *fsdata, unsigned int type,
+			       void *data);
+
+/* Flags for the struct lm_lockstruct->ls_flags field */
+
+#define LM_LSFLAG_LOCAL        (0x00000001)
+#define LM_LSFLAG_ASYNC        (0x00000002)
+
+/* Lock types */
+
+#define LM_TYPE_RESERVED       (0x00)
+#define LM_TYPE_NONDISK        (0x01)
+#define LM_TYPE_INODE          (0x02)
+#define LM_TYPE_RGRP           (0x03)
+#define LM_TYPE_META           (0x04)
+#define LM_TYPE_IOPEN          (0x05)
+#define LM_TYPE_FLOCK          (0x06)
+#define LM_TYPE_PLOCK          (0x07)
+#define LM_TYPE_QUOTA          (0x08)
+
+/* States passed to lock() */
+
+#define LM_ST_UNLOCKED         (0)
+#define LM_ST_EXCLUSIVE        (1)
+#define LM_ST_DEFERRED         (2)
+#define LM_ST_SHARED           (3)
+
+/* Flags passed to lock() */
+
+#define LM_FLAG_TRY            (0x00000001)
+#define LM_FLAG_TRY_1CB        (0x00000002)
+#define LM_FLAG_NOEXP          (0x00000004)
+#define LM_FLAG_ANY            (0x00000008)
+#define LM_FLAG_PRIORITY       (0x00000010)
+
+/* Flags returned by lock() */
+
+#define LM_OUT_ST_MASK         (0x00000003)
+#define LM_OUT_CACHEABLE       (0x00000004)
+#define LM_OUT_CANCELED        (0x00000008)
+#define LM_OUT_NEED_E          (0x00000010)
+#define LM_OUT_NEED_D          (0x00000020)
+#define LM_OUT_NEED_S          (0x00000040)
+#define LM_OUT_ASYNC           (0x00000080)
+#define LM_OUT_LVB_INVALID     (0x00000100)
+
+/* Callback types */
+
+#define LM_CB_NEED_E           (257)
+#define LM_CB_NEED_D           (258)
+#define LM_CB_NEED_S           (259)
+#define LM_CB_NEED_RECOVERY    (260)
+#define LM_CB_DROPLOCKS        (261)
+#define LM_CB_ASYNC            (262)
+
+/* Reset_exp messages */
+
+#define LM_RD_GAVEUP           (308)
+#define LM_RD_SUCCESS          (309)
+
+struct lm_lockname {
+	uint64_t ln_number;
+	unsigned int ln_type;
+};
+
+#define lm_name_equal(name1, name2) \
+(((name1)->ln_number == (name2)->ln_number) && \
+ ((name1)->ln_type == (name2)->ln_type)) \
+
+struct lm_async_cb {
+	struct lm_lockname lc_name;
+	int lc_ret;
+};
+
+struct lm_lockstruct;
+
+struct lm_lockops {
+	char lm_proto_name[256];
+
+	/* Mount/Unmount */
+
+	int (*lm_mount) (char *table_name, char *host_data,
+			 lm_callback_t cb, lm_fsdata_t *fsdata,
+			 unsigned int min_lvb_size,
+			 struct lm_lockstruct *lockstruct);
+	void (*lm_others_may_mount) (lm_lockspace_t *lockspace);
+	void (*lm_unmount) (lm_lockspace_t *lockspace);
+
+	/* Lock oriented operations */
+
+	int (*lm_get_lock) (lm_lockspace_t *lockspace,
+			    struct lm_lockname *name, lm_lock_t **lockp);
+	void (*lm_put_lock) (lm_lock_t *lock);
+
+	unsigned int (*lm_lock) (lm_lock_t *lock, unsigned int cur_state,
+				 unsigned int req_state, unsigned int flags);
+	unsigned int (*lm_unlock) (lm_lock_t *lock, unsigned int cur_state);
+
+	void (*lm_cancel) (lm_lock_t *lock);
+
+	int (*lm_hold_lvb) (lm_lock_t *lock, char **lvbp);
+	void (*lm_unhold_lvb) (lm_lock_t *lock, char *lvb);
+	void (*lm_sync_lvb) (lm_lock_t *lock, char *lvb);
+
+	/* Posix Lock oriented operations  */
+
+	int (*lm_plock_get) (lm_lockspace_t *lockspace,
+			     struct lm_lockname *name, unsigned long owner,
+			     uint64_t *start, uint64_t *end, int *exclusive,
+			     unsigned long *rowner);
+
+	int (*lm_plock) (lm_lockspace_t *lockspace,
+			 struct lm_lockname *name, unsigned long owner,
+			 int wait, int exclusive, uint64_t start,
+			 uint64_t end);
+
+	int (*lm_punlock) (lm_lockspace_t *lockspace,
+			   struct lm_lockname *name, unsigned long owner,
+			   uint64_t start, uint64_t end);
+
+	/* Client oriented operations */
+
+	void (*lm_recovery_done) (lm_lockspace_t *lockspace, unsigned int jid,
+				  unsigned int message);
+
+	struct module *lm_owner;
+};
+
+struct lm_lockstruct {
+	unsigned int ls_jid;
+	unsigned int ls_first;
+	unsigned int ls_lvb_size;
+	lm_lockspace_t *ls_lockspace;
+	struct lm_lockops *ls_ops;
+	int ls_flags;
+};
+
+/* Bottom interface */
+
+int lm_register_proto(struct lm_lockops *proto);
+void lm_unregister_proto(struct lm_lockops *proto);
+
+/* Top interface */
+
+int lm_mount(char *proto_name,
+	     char *table_name, char *host_data,
+	     lm_callback_t cb, lm_fsdata_t *fsdata,
+	     unsigned int min_lvb_size, struct lm_lockstruct *lockstruct);
+void lm_unmount(struct lm_lockstruct *lockstruct);
+
+#endif /* __LM_INTERFACE_DOT_H__ */
